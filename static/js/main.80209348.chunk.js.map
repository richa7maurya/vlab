{"version":3,"sources":["assets/img/hitesh.jpeg","assets/img/sudesh.jpeg","assets/img/kunal.jpeg","assets/img/ghanshyam.jpeg","assets/img/mam.jpeg","assets/img/mescoe_logo.png","assets/img/sidebar-3.jpg","components/Navbars/AdminNavbarLinks.jsx","components/Navbars/AdminNavbar.jsx","components/Footer/Footer.jsx","components/Sidebar/Sidebar.jsx","components/Card/Card.jsx","components/Table/MatrixToTable.jsx","components/Table/MatrixToTableWithLines.jsx","components/Checkbox/CustomCheckbox.jsx","views/HungarianAlgo.jsx","algorithms/NorthWestCornerMethod.js","algorithms/MatrixMinima.js","algorithms/RowMinimaMethod.js","algorithms/ColumnMinima.js","algorithms/ModiMethod.js","algorithms/SteppingStone.js","algorithms/VogelsApproximationMethod.js","views/TransportationProblem.jsx","views/TestCases.jsx","routes.js","layouts/Admin.jsx","index.js","assets/img/richa.jpg","assets/img/akash.jpeg","assets/img/parag.jpeg"],"names":["module","exports","__webpack_require__","p","AdminNavbarLinks","react_default","a","createElement","React","Component","Header","props","_this","Object","classCallCheck","this","_super","call","mobileSidebarToggle","bind","assertThisInitialized","state","sidebarExists","e","setState","preventDefault","document","documentElement","classList","toggle","Navbar","fluid","Brand","brandText","Toggle","onClick","Collapse","Navbars_AdminNavbarLinks","Footer","className","style","paddingTop","paddingBottom","fontSize","target","href","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","Image","src","img8","objectFit","borderRadius","margin","width","window","innerWidth","height","img2","img1","img7","img6","img4","padding","img5","img3","color","Sidebar","routeName","location","pathname","indexOf","updateDimensions","addEventListener","_this2","sidebarBackground","backgroundImage","image","id","data-color","data-image","hasImage","logo","alt","routes","map","prop","key","redirect","activeRoute","layout","path","react_router_dom","to","activeClassName","name","Card","_Component","inherits","Card_createSuper","apply","arguments","createClass","value","plain","hCenter","title","category","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","content","legend","stats","statsIcon","MatrixToTable","matrix","undefined","colHeaders","row","rowHeaders","push","textAlign","border","borderRight","i","length","concat","borderBottom","nRows","j","nCols","md","Table","MatrixToTableWithLines","backgroundColor","zeroMatrix","coveredByLines","cost","CustomCheckButton","checked","currentValue","paddingLeft","paddingRight","marginLeft","marginRight","HungarianAlgo","marks","label","sliderValue","costMatrix","isSliderSlided","isOptimaMax","step0Content","step1Content","step2Content","step3Content","step4Content","update","devTest","printRef","createRef","handleSlider","formCostMatrix","clearFields","generateRandomValues","handleInput","preprocessMatrix","solveStep0","solveStep1","solveStep2","solveStep3","solveStep4","keys","includes","possibleConstructorReturn","Promise","resolve","test","size","_","parseInt","Math","random","_loop","_loop2","_ref","Col","Input","type","placeholder","onChange","defineProperty","Row","maxWidth","event","col","Number","isNaN","nMatrix","givenMatrix","negatedMatrix","intermediateMatrix","maximizedMatrix","max","MAX_VALUE","row1","row2","row3","Table_MatrixToTable","result","attributes","preprocessedMatrix","leastRowValueMatrix","rowMinimizedIntermediateMatrix","rowMinimizedMatrix","min","nRow","headers","display","prevState","leastColValueMatrix","colMinimizedIntermediateMatrix","colMinimizedMatrix","minRow","intermediateRow","isStep2Solved","getMinLines","nLines","rowContent","iteration","Table_MatrixToTableWithLines","dict","resultantMatrix","_this3","assignedRowZero","assignedColZero","originalMatrixColored","costs","sum","iterations","zeroes","numberOfZeroes","num","position","_loop3","column","costsString","join","array","n","posn","newMatrix","crossedRows","crossedCols","assignedCols","assigned","isUpdated","prevCrossedCols","prevCrossedRows","k","compareArray","arr1","arr2","_this4","minHeight","ref","el","components_Card_Card","Form","FormGroup","Label","for","Slider","defaultValue","aria-labelledby","step","valueLabelDisplay","FormControlLabel","control","Switch","inputProps","aria-label","Button","aria-hidden","Container","NWC","matrixColHeaders","matrixRowHeaders","nSupply","nDemand","matrixToDisplay","console","log","flag","supply","demand","lastElement","reject","s1","s2","finalMatrix","finalMatrix1","initialMatrix","northWest","canProceed","st","ns","nd","marginBottom","elementA","elementB","s","index","arr","element","totalCost","callbackFunction","_resolve","_reject","mat","count","split","b","MatrixMinimaMethod","isBalanced","sumSupply","sumDemand","mergeSuppyDemand","matrixMinima","mergedMatrix","toConsumableArray","demandExhaust","supplyExhaust","assignedPosition","assignedValues","isExhausted","findMin","substring","filter","matrixwithLines","MAX_SAFE_INTEGER","exhaust","RowMinimaMethod","rowMinima","intermediate","temp","minima","atoi","mat1","string","ColumnMinima","colMinima","ModiMethod","outputMatrix","feasibleMatrix","loop","u","v","penalty","Array","fill","c","calc_u_v","disequations","text","cal_penalty","optimize","totalcost","pen","minpen","minx","miny","dummy","up","down","right","left","dispVar","direct","pop","x","y","ch","minalloc","val","substr","val_st","subs","opt_allocate","ans","alloc","SteppingStone","finalloop","calc_opcost","getloop","VogelsApproximationMethod","balanced","m","maxPenalty","rowIndex","colIndex","solve","final","copy","degenerate","stoi","fmin","smin","row_index","col_index","cell","rowmax","MIN_SAFE_INTEGER","colmax","rmax_allocation","cmax_allocation","rmincost","cmincost","penaltyTie","costTie","allocate","allocation","vec","attribute","mincost","TransportationProblem","nSources","nDestinations","feasibleSolution","optimalSolution","toggleCheckbox","optimalContent","ModiMethod_ModiMethod","SteppingStone_SteppingStone","RowMinimaMethod_RowMinimaMethod","ColumnMinima_ColumnMinima","MatrixMinima_MatrixMinimaMethod","VogelsApproximationMethod_VogelsApproximationMethod","NorthWestCornerMethod_NWC","feasibleSolutionMethod","_ref2","handleSupplyInput","_ref3","handleDemandInput","_this$setState","solveForOptimal","_this$setState2","CustomCheckbox_CustomCheckButton","clear","TestCases","testStarted","isPaused","numTestCases","testcases","numSuccess","numFailure","testIndex","showFailedCases","time","remainingTime","handleChange","minOptimal","then","optimal","json","objectSpread","clearTimeout","timeout","Date","getTime","setInterval","round","sec","testHungarianAlgorithm","forceUpdate","percent","toFixed","es_Card","CardBody","CardTitle","fontWeight","CardSubtitle","pauseTesting","stopTesting","dashboardRoutes","component","Admin","getRoutes","react_router","render","getBrandText","fixedClasses","history","action","scrollTop","scrollingElement","refs","mainPanel","components_Sidebar_Sidebar","assign","AdminNavbar","components_Footer_Footer","ReactDOM","layouts_Admin","from","getElementById"],"mappings":"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","file":"static/js/main.80209348.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hitesh.84fddc1d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/sudesh.b0150be8.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/kunal.b11f832e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/ghanshyam.c75cb46d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mam.6e64533e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/mescoe_logo.4eac2000.png\";","module.exports = __webpack_public_path__ + \"static/media/sidebar-3.b20b2188.jpg\";","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\n\r\nclass AdminNavbarLinks extends React.Component {\r\n    render() {\r\n        return <div>{/* <Nav /> */}</div>;\r\n    }\r\n}\r\n\r\nexport default AdminNavbarLinks;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nimport AdminNavbarLinks from \"./AdminNavbarLinks.jsx\";\r\n\r\nclass Header extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.mobileSidebarToggle = this.mobileSidebarToggle.bind(this);\r\n        this.state = {\r\n            sidebarExists: false,\r\n        };\r\n    }\r\n    mobileSidebarToggle(e) {\r\n        if (this.state.sidebarExists === false) {\r\n            this.setState({\r\n                sidebarExists: true,\r\n            });\r\n        }\r\n        e.preventDefault();\r\n        document.documentElement.classList.toggle(\"nav-open\");\r\n    }\r\n    render() {\r\n        return (\r\n            <Navbar fluid>\r\n                <Navbar.Header>\r\n                    <Navbar.Brand>{this.props.brandText}</Navbar.Brand>\r\n                    <Navbar.Toggle onClick={this.mobileSidebarToggle} />\r\n                </Navbar.Header>\r\n\r\n                <Navbar.Collapse>\r\n                    <AdminNavbarLinks />\r\n                </Navbar.Collapse>\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { Image, Tooltip, OverlayTrigger } from \"react-bootstrap\";\r\n\r\nimport img1 from \"assets/img/richa.jpg\";\r\nimport img2 from \"assets/img/akash.jpeg\";\r\nimport img3 from \"assets/img/parag.jpeg\";\r\nimport img4 from \"assets/img/hitesh.jpeg\";\r\nimport img5 from \"assets/img/sudesh.jpeg\";\r\nimport img6 from \"assets/img/kunal.jpeg\";\r\nimport img7 from \"assets/img/ghanshyam.jpeg\";\r\nimport img8 from \"assets/img/mam.jpeg\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer\r\n                className=\"footer\"\r\n                style={{ paddingTop: 12, paddingBottom: 12 }}\r\n            >\r\n                <center>\r\n                    <div>\r\n                        <div style={{ fontSize: 16 }}>\r\n                            Designed and Developed by\r\n                        </div>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/dr-reva-m-wahul-96861318/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 0 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Prof.(Dr.) Revati Wahul</h6>\r\n                                        Project Guide\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img8}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        margin: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/akashlende/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Akash Lende</h6>\r\n                                        React Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img2}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        margin: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/richa7maurya/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Richa Maurya</h6>\r\n                                        React Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img1}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        margin: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/ghanshyam-patil-aa721a18a/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Ghanshyam Patil</h6>\r\n                                        Python Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img7}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        margin: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/yeolakunal/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Kunal Yeola</h6>\r\n                                        Python Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img6}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        margin: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 16 : 42,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/hitesh-chordiya-a3b27b188/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Hitesh Chordiya</h6>\r\n                                        Python Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img4}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        padding: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/sudesh-pawar/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Sudesh Pawar</h6>\r\n                                        Python Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img5}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        padding: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                        <a\r\n                            target=\"_blank\"\r\n                            href=\"https://www.linkedin.com/in/parag-ghorpade/\"\r\n                        >\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                delay={{ show: 50, hide: 400 }}\r\n                                overlay={\r\n                                    <Tooltip>\r\n                                        <h6>Parag Ghorpade</h6>\r\n                                        Python Developer\r\n                                    </Tooltip>\r\n                                }\r\n                            >\r\n                                <Image\r\n                                    src={img3}\r\n                                    style={{\r\n                                        objectFit: \"cover\",\r\n                                        borderRadius: \"25px\",\r\n                                        padding: \"4px\",\r\n                                        width:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                        height:\r\n                                            window.innerWidth < 800 ? 20 : 50,\r\n                                    }}\r\n                                ></Image>\r\n                            </OverlayTrigger>\r\n                        </a>\r\n                    </div>\r\n                    <a href=\"http://www.mescoepune.org/\" target=\"_blank\">\r\n                        {\" \"}\r\n                        <div style={{ paddingTop: \"10px\", color: \"#808080\" }}>\r\n                            MES COLLEGE OF ENGINEERING, PUNE\r\n                        </div>\r\n                    </a>\r\n                </center>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport AdminNavbarLinks from \"../Navbars/AdminNavbarLinks.jsx\";\r\n\r\nimport logo from \"assets/img/mescoe_logo.png\";\r\n\r\nclass Sidebar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: window.innerWidth,\r\n        };\r\n    }\r\n    activeRoute(routeName) {\r\n        return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n    }\r\n    updateDimensions() {\r\n        this.setState({ width: window.innerWidth });\r\n    }\r\n    componentDidMount() {\r\n        this.updateDimensions();\r\n        window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n    }\r\n    render() {\r\n        const sidebarBackground = {\r\n            backgroundImage: \"url(\" + this.props.image + \")\",\r\n        };\r\n        return (\r\n            <div\r\n                id=\"sidebar\"\r\n                className=\"sidebar\"\r\n                data-color={this.props.color}\r\n                data-image={this.props.image}\r\n            >\r\n                {this.props.hasImage ? (\r\n                    <div className=\"sidebar-background\" style={sidebarBackground} />\r\n                ) : null}\r\n                <div className=\"logo\">\r\n                    <a href=\"http://mescoepune.org/\" className=\"simple-text logo-mini\">\r\n                        <div className=\"logo-img\">\r\n                            <img src={logo} alt=\"logo_image\" />\r\n                        </div>\r\n                    </a>\r\n                    <a href=\"http://mescoepune.org/\" className=\"simple-text logo-normal\">\r\n                        OR Lab\r\n                    </a>\r\n                </div>\r\n                <div className=\"sidebar-wrapper\">\r\n                    <ul className=\"nav\">\r\n                        {this.state.width <= 991 ? <AdminNavbarLinks /> : null}\r\n                        {this.props.routes.map((prop, key) => {\r\n                            if (!prop.redirect)\r\n                                return (\r\n                                    <li\r\n                                        className={this.activeRoute(prop.layout + prop.path)}\r\n                                        key={key}\r\n                                    >\r\n                                        <NavLink\r\n                                            to={prop.layout + prop.path}\r\n                                            className=\"nav-link\"\r\n                                            activeClassName=\"active\"\r\n                                        >\r\n                                            <p>{prop.name}</p>\r\n                                        </NavLink>\r\n                                    </li>\r\n                                );\r\n                            return null;\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { Component } from \"react\";\r\n\r\nexport class Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\r\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")}>\r\n          <h4 className=\"title\">{this.props.title}</h4>\r\n          <p className=\"category\">{this.props.category}</p>\r\n        </div>\r\n        <div\r\n          className={\r\n            \"content\" +\r\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\r\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\r\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\r\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\r\n          }\r\n        >\r\n          {this.props.content}\r\n\r\n          <div className=\"footer\">\r\n            {this.props.legend}\r\n            {this.props.stats != null ? <hr /> : \"\"}\r\n            <div className=\"stats\">\r\n              <i className={this.props.statsIcon} /> {this.props.stats}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass MatrixToTable extends React.Component {\r\n    render() {\r\n        this.matrix = [];\r\n        if (this.props.colHeaders !== undefined) {\r\n            let row = [];\r\n            if (this.props.rowHeaders !== undefined)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderRight: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {\"\"}\r\n                    </th>,\r\n                );\r\n            for (let i = 0; i < this.props.colHeaders.length; i++)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading-${i}`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderBottom: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {this.props.colHeaders[i]}\r\n                    </th>,\r\n                );\r\n            this.matrix.push(<tr key={`table-heading`}>{row}</tr>);\r\n        }\r\n        for (let i = 0; i < this.props.nRows; i++) {\r\n            let row = [];\r\n            if (this.props.rowHeaders !== undefined)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading-${i}`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderRight: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {this.props.rowHeaders[i]}\r\n                    </th>,\r\n                );\r\n            for (let j = 0; j < this.props.nCols; j++) {\r\n                row.push(\r\n                    <td\r\n                        key={`table-row-${i}${j}`}\r\n                        md=\"1\"\r\n                        style={{ padding: 5, border: \"1px solid #aaa\", textAlign: \"center\" }}\r\n                    >\r\n                        {this.props.matrix[i][j]}\r\n                    </td>,\r\n                );\r\n            }\r\n            this.matrix.push(\r\n                <tr key={`table-row-${i}`} style={{ padding: 0 }}>\r\n                    {row}\r\n                </tr>,\r\n            );\r\n        }\r\n        return (\r\n            <Table\r\n                style={{\r\n                    margin: 10,\r\n                    width: \"auto\",\r\n                }}\r\n                className=\"table-bordered\"\r\n            >\r\n                <tbody>{this.matrix}</tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MatrixToTable;\r\n","import React from \"react\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass MatrixToTableWithLines extends React.Component {\r\n    createMatrix() {}\r\n    render() {\r\n        this.matrix = [];\r\n        // console.log(this.props.matrix);\r\n        if (this.props.colHeaders !== undefined) {\r\n            let row = [];\r\n            if (this.props.rowHeaders !== undefined)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderRight: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {\"\"}\r\n                    </th>\r\n                );\r\n            for (let i = 0; i < this.props.colHeaders.length; i++)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading-${i}`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderBottom: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {this.props.colHeaders[i]}\r\n                    </th>\r\n                );\r\n            this.matrix.push(<tr key={`table-heading`}>{row}</tr>);\r\n        }\r\n        for (let i = 0; i < this.props.nRows; i++) {\r\n            let row = [];\r\n            if (this.props.rowHeaders !== undefined)\r\n                row.push(\r\n                    <th\r\n                        key={`table-heading-${i}`}\r\n                        style={{\r\n                            padding: 10,\r\n                            textAlign: \"center\",\r\n                            border: \"none\",\r\n                            borderRight: \"1px solid #aaa\",\r\n                        }}\r\n                    >\r\n                        {this.props.rowHeaders[i]}\r\n                    </th>\r\n                );\r\n            for (let j = 0; j < this.props.nCols; j++) {\r\n                row.push(\r\n                    <td\r\n                        key={`table-row-${i}${j}`}\r\n                        md=\"1\"\r\n                        style={{\r\n                            padding: 5,\r\n                            border: \"1px solid #aaa\",\r\n                            textAlign: \"center\",\r\n                            backgroundColor: this.props.zeroMatrix\r\n                                ? this.props.matrix[i][j].color === 1\r\n                                    ? \"#9ab3f5\"\r\n                                    : null\r\n                                : this.props.matrix[i][j].coveredByLines === 0\r\n                                ? null\r\n                                : this.props.matrix[i][j].coveredByLines === 1\r\n                                ? \"#9ab3f5\"\r\n                                : \"#7579e7\",\r\n                        }}\r\n                    >\r\n                        {this.props.matrix[i][j].cost}\r\n                    </td>\r\n                );\r\n            }\r\n\r\n            this.matrix.push(\r\n                <tr key={`table-row-${i}`} style={{ padding: 0 }}>\r\n                    {row}\r\n                </tr>\r\n            );\r\n        }\r\n        return (\r\n            <Table\r\n                style={{\r\n                    margin: 10,\r\n                    width: \"auto\",\r\n                }}\r\n                className=\"table-bordered\"\r\n            >\r\n                <tbody>{this.matrix}</tbody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MatrixToTableWithLines;\r\n","import React from \"react\";\r\n\r\nexport default class CustomCheckButton extends React.Component {\r\n    render() {\r\n        let checked = this.props.value === this.props.currentValue;\r\n        return (\r\n            <span\r\n                style={{\r\n                    border: `2px solid ${checked ? \"#1153d9\" : \"#1D62F0\"}`,\r\n                    backgroundColor: checked ? \"#1153d9\" : \"#fff\",\r\n                    color: !checked ? \"#1D62F0\" : \"#fff\",\r\n                    paddingLeft: 3,\r\n                    paddingRight: 28,\r\n                    paddingTop: 5,\r\n                    paddingBottom: 5,\r\n                    borderRadius: 25,\r\n                    margin: 8,\r\n                    marginLeft: 0,\r\n                }}\r\n                className=\"btn text-center\"\r\n                onClick={(e) => {\r\n                    this.props.toggle(this.props.name, this.props.value);\r\n                }}\r\n            >\r\n                <i\r\n                    className=\"fa fa-check\"\r\n                    style={{\r\n                        color: \"#fff\",\r\n                        marginLeft: 3,\r\n                        marginRight: 4,\r\n                    }}\r\n                ></i>\r\n                <span>{this.props.content}</span>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n","import Card from \"components/Card/Card\";\r\nimport React from \"react\";\r\nimport { Form, FormGroup, Label, Row, Col, Input, Button, Container } from \"reactstrap\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nimport { Switch, FormControlLabel } from \"@material-ui/core/\";\r\nimport CustomCheckButton from \"components/Checkbox/CustomCheckbox\";\r\n\r\nclass HungarianAlgo extends React.Component {\r\n    marks = [\r\n        {\r\n            value: 2,\r\n            label: \"2\",\r\n        },\r\n        {\r\n            value: 3,\r\n            label: \"3\",\r\n        },\r\n        {\r\n            value: 4,\r\n            label: \"4\",\r\n        },\r\n        {\r\n            value: 5,\r\n            label: \"5\",\r\n        },\r\n        {\r\n            value: 6,\r\n            label: \"6\",\r\n        },\r\n        {\r\n            value: 7,\r\n            label: \"7\",\r\n        },\r\n        {\r\n            value: 8,\r\n            label: \"8\",\r\n        },\r\n        {\r\n            value: 9,\r\n            label: \"9\",\r\n        },\r\n        {\r\n            value: 10,\r\n            label: \"10\",\r\n        },\r\n    ];\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            sliderValue: 2,\r\n            matrix: [\r\n                [217, 941, 615, 118, 950, 310, 141, 521],\r\n                [573, 958, 54, 216, 808, 625, 379, 771],\r\n                [578, 146, 915, 447, 464, 850, 312, 1],\r\n                [141, 31, 957, 9, 27, 90, 2, 45],\r\n                [193, 108, 290, 481, 717, 94, 19, 91],\r\n                [95, 77, 1, 108, 63, 823, 42, 559],\r\n                [220, 688, 418, 682, 500, 736, 270, 47],\r\n                [196, 819, 597, 85, 828, 109, 721, 405],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n            ],\r\n            costMatrix: null,\r\n            isSliderSlided: false,\r\n            isOptimaMax: false,\r\n            step0Content: null,\r\n            step1Content: null,\r\n            step2Content: null,\r\n            step3Content: null,\r\n            step4Content: null,\r\n            update: false,\r\n            devTest: false,\r\n        };\r\n        this.printRef = React.createRef();\r\n        this.handleSlider = this.handleSlider.bind(this);\r\n        this.formCostMatrix = this.formCostMatrix.bind(this);\r\n        this.clearFields = this.clearFields.bind(this);\r\n        this.generateRandomValues = this.generateRandomValues.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.preprocessMatrix = this.preprocessMatrix.bind(this);\r\n        this.solveStep0 = this.solveStep0.bind(this);\r\n        this.solveStep1 = this.solveStep1.bind(this);\r\n        this.solveStep2 = this.solveStep2.bind(this);\r\n        this.solveStep3 = this.solveStep3.bind(this);\r\n        this.solveStep4 = this.solveStep4.bind(this);\r\n\r\n        if (Object.keys(this.props).includes(\"devTest\")) {\r\n            this.state.devTest = true;\r\n            return new Promise((resolve) => {\r\n                resolve(this.test(this.props.matrix, this.props.size));\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.update) this.formCostMatrix();\r\n    }\r\n\r\n    handleSlider(_, value) {\r\n        this.setState({ sliderValue: value, update: true, isSliderSlided: true });\r\n    }\r\n\r\n    clearFields() {\r\n        this.setState({\r\n            matrix: [\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null, null],\r\n            ],\r\n            update: true,\r\n        });\r\n    }\r\n\r\n    generateRandomValues() {\r\n        let matrix = this.state.matrix;\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                matrix[i][j] = parseInt(Math.random() * 100, 10);\r\n            }\r\n        }\r\n        this.setState({ matrix: matrix, update: true });\r\n    }\r\n\r\n    formCostMatrix() {\r\n        let matrix = [];\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row = [];\r\n\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                row.push(\r\n                    <Col\r\n                        md=\"1\"\r\n                        key={`cell${i}${j}`}\r\n                        className=\"col-xs-1\"\r\n                        style={window.innerWidth >= 800 ? null : { padding: 0, margin: 0 }}\r\n                    >\r\n                        <Input\r\n                            type=\"text\"\r\n                            name={`cell${i}${j}`}\r\n                            id={`cell${i}${j}`}\r\n                            placeholder=\"\"\r\n                            value={this.state.matrix[i][j] != null ? this.state.matrix[i][j] : \"\"}\r\n                            onChange={(e) => this.handleInput(e, i, j)}\r\n                            style={\r\n                                window.innerWidth >= 800\r\n                                    ? { width: 50, height: 50, textAlign: \"center\" }\r\n                                    : {\r\n                                          textAlign: \"center\",\r\n                                          width: \"100%\",\r\n                                          padding: 0,\r\n                                          width: 23,\r\n                                          height: 23,\r\n                                      }\r\n                            }\r\n                        />\r\n                    </Col>,\r\n                );\r\n            }\r\n            matrix.push(\r\n                <Row key={`row${i}`} style={{ maxWidth: 800 }}>\r\n                    {row}\r\n                </Row>,\r\n            );\r\n        }\r\n        this.setState({ costMatrix: matrix, update: false });\r\n    }\r\n\r\n    handleInput(event, row, col) {\r\n        let matrix = this.state.matrix;\r\n        matrix[row][col] = parseInt(event.target.value, 10);\r\n        matrix[row][col] = Number.isNaN(matrix[row][col]) ? null : matrix[row][col];\r\n        this.setState({ matrix: matrix, update: true });\r\n    }\r\n\r\n    preprocessMatrix() {\r\n        let nMatrix = this.state.matrix;\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                nMatrix[i][j] = this.state.matrix[i][j] == null ? 0 : this.state.matrix[i][j];\r\n            }\r\n        }\r\n        if (!this.state.devTest) this.setState({ matrix: nMatrix });\r\n        else this.state.matrix = nMatrix;\r\n    }\r\n\r\n    solveStep0() {\r\n        this.preprocessMatrix();\r\n\r\n        let givenMatrix = [];\r\n        let negatedMatrix = [];\r\n        let intermediateMatrix = [];\r\n        let maximizedMatrix = [];\r\n\r\n        let max = -Number.MAX_VALUE;\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                if (max < this.state.matrix[i][j]) max = this.state.matrix[i][j];\r\n                row.push(this.state.matrix[i][j]);\r\n            }\r\n            givenMatrix.push(row);\r\n        }\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row1 = [];\r\n            let row2 = [];\r\n            let row3 = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                row1.push(-this.state.matrix[i][j]);\r\n                row2.push(\r\n                    `-${this.state.matrix[i][j]} + ${max} = ${-this.state.matrix[i][j] + max}`,\r\n                );\r\n                row3.push(-this.state.matrix[i][j] + max);\r\n            }\r\n            negatedMatrix.push(row1);\r\n            intermediateMatrix.push(row2);\r\n            maximizedMatrix.push(row3);\r\n        }\r\n\r\n        givenMatrix = (\r\n            <MatrixToTable\r\n                matrix={givenMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        negatedMatrix = (\r\n            <MatrixToTable\r\n                matrix={negatedMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        intermediateMatrix = (\r\n            <MatrixToTable\r\n                matrix={intermediateMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let result = maximizedMatrix;\r\n        maximizedMatrix = (\r\n            <MatrixToTable\r\n                matrix={maximizedMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let content = (\r\n            <div>\r\n                <Row>\r\n                    <span className=\"text\">Given cost matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Find the max value in the matrix. In this case, max value is {max}. Now, we\r\n                        negate all the values in the matrix.\r\n                    </span>\r\n                    <br />\r\n                    {negatedMatrix}\r\n                    <br />\r\n                </Row>\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Once all the values are negated we add the max value to each value in the\r\n                        matrix, as follows -\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    {intermediateMatrix}\r\n                    <br />\r\n                </Row>\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        The resultant matrix after all the calculations is{\" \"}\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    {maximizedMatrix}\r\n                    <br />\r\n                </Row>\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Once we get this matrix, rest of the steps are similar to the Hungarian\r\n                        Algorithm for finding minimum cost.\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>\r\n            </div>\r\n        );\r\n\r\n        if (!this.state.devTest) this.setState({ step0Content: content, update: true });\r\n        return this.solveStep1({ matrix: result });\r\n    }\r\n\r\n    solveStep1(attributes) {\r\n        if (!this.state.isOptimaMax) this.preprocessMatrix();\r\n\r\n        let preprocessedMatrix = this.state.isOptimaMax ? attributes.matrix : this.state.matrix;\r\n\r\n        let matrix = [];\r\n        let leastRowValueMatrix = [];\r\n        let rowMinimizedIntermediateMatrix = [];\r\n        let rowMinimizedMatrix = [];\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row = [];\r\n            let min = Number.MAX_VALUE;\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                if (min > preprocessedMatrix[i][j]) min = preprocessedMatrix[i][j];\r\n                row.push(preprocessedMatrix[i][j]);\r\n            }\r\n            matrix.push(row);\r\n            row.push(min);\r\n            leastRowValueMatrix.push(row);\r\n\r\n            row = [];\r\n            let nRow = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                let value = preprocessedMatrix[i][j] - min;\r\n                row.push(`${preprocessedMatrix[i][j]} - ${min} = ${value}`);\r\n                nRow.push(value);\r\n            }\r\n\r\n            rowMinimizedIntermediateMatrix.push(row);\r\n            rowMinimizedMatrix.push(nRow);\r\n        }\r\n\r\n        let givenMatrix = (\r\n            <MatrixToTable\r\n                matrix={matrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let headers = [];\r\n        for (let i = 0; i < this.state.sliderValue; i++) headers.push(\"\");\r\n        headers.push(\"Least Value\");\r\n\r\n        leastRowValueMatrix = (\r\n            <MatrixToTable\r\n                matrix={leastRowValueMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue + 1}\r\n                colHeaders={headers}\r\n            />\r\n        );\r\n\r\n        rowMinimizedIntermediateMatrix = (\r\n            <MatrixToTable\r\n                matrix={rowMinimizedIntermediateMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let result = rowMinimizedMatrix;\r\n\r\n        rowMinimizedMatrix = (\r\n            <MatrixToTable\r\n                matrix={rowMinimizedMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let content = (\r\n            <div>\r\n                <Row style={{ display: this.state.isOptimaMax ? \"none\" : \"block\" }}>\r\n                    <span className=\"text\">Given cost matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <span className=\"text\">We find minimum value for each row -</span> <br />\r\n                    {leastRowValueMatrix}\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Subtract least value for each row from all the elements in that row -\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    {rowMinimizedIntermediateMatrix}\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <span className=\"text\">And, thus the final row minimized matrix -</span> <br />\r\n                    {rowMinimizedMatrix}\r\n                </Row>\r\n            </div>\r\n        );\r\n\r\n        if (!this.state.devTest)\r\n            this.setState((prevState) => {\r\n                return {\r\n                    step0Content: prevState.isOptimaMax ? prevState.step0Content : null,\r\n                    step1Content: content,\r\n                    update: true,\r\n                };\r\n            });\r\n        return this.solveStep2(result);\r\n    }\r\n\r\n    solveStep2(rowMinimizedMatrix) {\r\n        // console.log(\"solve step 2\", this.state.sliderValue, rowMinimizedMatrix);\r\n        let matrix = [];\r\n        let leastColValueMatrix = [];\r\n        let colMinimizedIntermediateMatrix = [];\r\n        let colMinimizedMatrix = [];\r\n\r\n        let minRow = [];\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let min = Number.MAX_VALUE;\r\n            let row = [];\r\n\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                if (min > rowMinimizedMatrix[j][i]) {\r\n                    min = rowMinimizedMatrix[j][i];\r\n                }\r\n                row.push(rowMinimizedMatrix[i][j]);\r\n            }\r\n\r\n            matrix.push(row);\r\n            leastColValueMatrix.push(row);\r\n\r\n            minRow.push(min);\r\n        }\r\n        leastColValueMatrix.push(minRow);\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let intermediateRow = [];\r\n            let row = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                let value = rowMinimizedMatrix[i][j] - minRow[j];\r\n                intermediateRow.push(`${rowMinimizedMatrix[i][j]} - ${minRow[j]} = ${value}`);\r\n                row.push(value);\r\n            }\r\n            colMinimizedIntermediateMatrix.push(intermediateRow);\r\n            colMinimizedMatrix.push(row);\r\n        }\r\n\r\n        let headers = [];\r\n        for (let i = 0; i < this.state.sliderValue; i++) headers.push(\"\");\r\n        headers.push(\"Least Value\");\r\n\r\n        leastColValueMatrix = (\r\n            <MatrixToTable\r\n                matrix={leastColValueMatrix}\r\n                nRows={this.state.sliderValue + 1}\r\n                nCols={this.state.sliderValue}\r\n                rowHeaders={headers}\r\n            />\r\n        );\r\n\r\n        colMinimizedIntermediateMatrix = (\r\n            <MatrixToTable\r\n                matrix={colMinimizedIntermediateMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let result = colMinimizedMatrix;\r\n        colMinimizedMatrix = (\r\n            <MatrixToTable\r\n                matrix={colMinimizedMatrix}\r\n                nRows={this.state.sliderValue}\r\n                nCols={this.state.sliderValue}\r\n            />\r\n        );\r\n\r\n        let content = (\r\n            <div>\r\n                <Row>\r\n                    <span className=\"text\">We find minimum value for each column -</span> <br />\r\n                    {leastColValueMatrix}\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Subtract least value for each column from all the elements in that column -\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    {colMinimizedIntermediateMatrix}\r\n                </Row>\r\n                <br />\r\n                <Row>\r\n                    <span className=\"text\">And, thus the final column minimized matrix -</span>{\" \"}\r\n                    <br />\r\n                    {colMinimizedMatrix}\r\n                </Row>\r\n            </div>\r\n        );\r\n\r\n        if (!this.state.devTest) this.setState({ isStep2Solved: true, step2Content: content });\r\n        return this.solveStep3(result);\r\n    }\r\n\r\n    solveStep3(colMinimizedMatrix) {\r\n        let map = this.getMinLines(colMinimizedMatrix);\r\n        let matrix = map.matrix;\r\n        let nLines = map.nLines;\r\n        let rowContent = [];\r\n        let iteration = 1;\r\n        rowContent.push(\r\n            <Row key={`row-${iteration}`}>\r\n                <span style={{ fontSize: 18 }}>{`Iteration - ${iteration}`}</span>\r\n                <br />\r\n                Draw minimum number of lines such that all the zeros are covered - <br />\r\n                <MatrixToTableWithLines\r\n                    matrix={matrix}\r\n                    nRows={this.state.sliderValue}\r\n                    nCols={this.state.sliderValue}\r\n                />\r\n                {`All zeroes can be covered in minimum ${nLines} lines.`}\r\n                <br />\r\n            </Row>,\r\n        );\r\n\r\n        while (nLines < this.state.sliderValue) {\r\n            iteration += 1;\r\n            rowContent.push(\r\n                <Row key={`row-${iteration}-0`}>\r\n                    {`${this.state.sliderValue} number of tasks are to be assigned. i.e. n = ${this.state.sliderValue}`}\r\n                    <br />\r\n                    {`But, the number of lines formed is ${nLines}. Therefore, we increase the number of zeroes.`}\r\n                </Row>,\r\n            );\r\n\r\n            // TODO: increase zero function modularization\r\n            let intermediateMatrix = [];\r\n            let min = Number.MAX_VALUE;\r\n            let costMatrix = [];\r\n\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                for (let j = 0; j < this.state.sliderValue; j++) {\r\n                    if (matrix[i][j].coveredByLines == 0 && min > matrix[i][j].cost) {\r\n                        min = matrix[i][j].cost;\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                let row = [];\r\n                let nRow = [];\r\n                for (let j = 0; j < this.state.sliderValue; j++) {\r\n                    if (matrix[i][j].coveredByLines == 0) {\r\n                        row.push(`${matrix[i][j].cost} - ${min} = ${matrix[i][j].cost - min}`);\r\n                        nRow.push(matrix[i][j].cost - min);\r\n                    } else if (matrix[i][j].coveredByLines == 2) {\r\n                        row.push(`${matrix[i][j].cost} + ${min} = ${matrix[i][j].cost + min}`);\r\n                        nRow.push(matrix[i][j].cost + min);\r\n                    } else {\r\n                        row.push(`${matrix[i][j].cost}`);\r\n                        nRow.push(matrix[i][j].cost);\r\n                    }\r\n                }\r\n                intermediateMatrix.push(row);\r\n                costMatrix.push(nRow);\r\n            }\r\n\r\n            rowContent.push(\r\n                <Row key={`row-${iteration}-1`}>\r\n                    <br />\r\n                    <br />\r\n                    <span style={{ fontSize: 18 }}>{`Iteration - ${iteration}`}</span>\r\n                    <br />\r\n                    {`Find the least valued element which is not covered by any line. Here such an element is ${min}. i.e. min = ${min}.`}\r\n                    <br />\r\n                    {`Subtract the min element from all the uncovered elements of the matrix and add it to the doubly covered elements.\\n`}\r\n                    <br />\r\n                    {`Leave the singly covered elements as it is.`}\r\n                    <MatrixToTable\r\n                        matrix={intermediateMatrix}\r\n                        nRows={this.state.sliderValue}\r\n                        nCols={this.state.sliderValue}\r\n                    />\r\n                </Row>,\r\n            );\r\n            rowContent.push(\r\n                <Row key={`row-${iteration}-2`}>\r\n                    <br />\r\n                    Upon calculations, we get the following result,\r\n                    <MatrixToTable\r\n                        matrix={costMatrix}\r\n                        nRows={this.state.sliderValue}\r\n                        nCols={this.state.sliderValue}\r\n                    />\r\n                </Row>,\r\n            );\r\n            let dict = this.getMinLines(costMatrix);\r\n\r\n            nLines = dict.nLines;\r\n            matrix = dict.matrix;\r\n\r\n            rowContent.push(\r\n                <Row key={`row-${iteration}-3`}>\r\n                    <br />\r\n                    Now we again draw minimum number of lines covering all the zeroes in the matrix\r\n                    -\r\n                    <MatrixToTableWithLines\r\n                        matrix={matrix}\r\n                        nRows={this.state.sliderValue}\r\n                        nCols={this.state.sliderValue}\r\n                    />\r\n                </Row>,\r\n            );\r\n        }\r\n\r\n        rowContent.push(\r\n            <Row key={`row-final`}>\r\n                <br />\r\n                {`Now, we can see that the number of lines(i.e. k = ${nLines}) is equal to the number of tasks to be assigned`}\r\n                <br />\r\n                {\"Therefore, this is the final optimized cost matrix.\"}\r\n            </Row>,\r\n        );\r\n\r\n        let content = (\r\n            <div>\r\n                <Row>{rowContent}</Row>\r\n                <br />\r\n            </div>\r\n        );\r\n        if (!this.state.devTest) this.setState({ step3Content: content });\r\n        return this.solveStep4(matrix);\r\n    }\r\n\r\n    solveStep4(resultantMatrix) {\r\n        return new Promise((resolve) => {\r\n            let assignedRowZero = [];\r\n            let assignedColZero = [];\r\n            let originalMatrixColored = [];\r\n            let costs = [];\r\n            let sum = 0;\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.sliderValue; j++) {\r\n                    row.push({\r\n                        cost: this.state.matrix[i][j],\r\n                        color: 0,\r\n                    });\r\n                }\r\n                originalMatrixColored.push(row);\r\n            }\r\n\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                assignedRowZero.push(false);\r\n                assignedColZero.push(false);\r\n            }\r\n            let iterations = 0;\r\n            // console.log(assignedColZero);\r\n            // console.log(assignedRowZero);\r\n            // console.log(\"1\");\r\n            let noOfAssignedZeroes = 0;\r\n            while (iterations < this.state.sliderValue) {\r\n                for (let i = 0; i < this.state.sliderValue; i++) {\r\n                    let zeroes = this.numberOfZeroes(resultantMatrix[i], assignedColZero);\r\n                    if (zeroes.num == 1) {\r\n                        // console.log(i, zeroes.position);\r\n                        noOfAssignedZeroes += 1;\r\n                        assignedColZero[zeroes.position] = true;\r\n                        assignedRowZero[i] = true;\r\n                        originalMatrixColored[i][zeroes.position].color = 1;\r\n                        costs.push(originalMatrixColored[i][zeroes.position].cost);\r\n                        sum += originalMatrixColored[i][zeroes.position].cost;\r\n                        resultantMatrix[i][zeroes.position].color = 1;\r\n                        // console.log(assignedRowZero);\r\n                        // console.log(assignedColZero);\r\n                    }\r\n                }\r\n                iterations++;\r\n            }\r\n            // console.log(\"2\");\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                if (!assignedColZero[i]) {\r\n                    let column = resultantMatrix.map((value, _) => value[i]);\r\n                    let zeroes = this.numberOfZeroes(column, assignedRowZero);\r\n                    if (zeroes.num == 1) {\r\n                        // console.log(zeroes.position, i);\r\n                        noOfAssignedZeroes += 1;\r\n                        assignedColZero[i] = true;\r\n                        assignedRowZero[zeroes.position] = true;\r\n                        originalMatrixColored[zeroes.position][i].color = 1;\r\n                        costs.push(originalMatrixColored[zeroes.position][i].cost);\r\n                        sum += originalMatrixColored[zeroes.position][i].cost;\r\n                        resultantMatrix[zeroes.position][i].color = 1;\r\n                        // console.log(assignedRowZero);\r\n                        // console.log(assignedColZero);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // console.log(\"3\");\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                let zeroes = this.numberOfZeroes(resultantMatrix[i], assignedColZero);\r\n                if (!assignedRowZero[i] && zeroes.position != -1) {\r\n                    // console.log(i, zeroes.position);\r\n                    assignedColZero[zeroes.position] = true;\r\n                    assignedRowZero[i] = true;\r\n                    originalMatrixColored[i][zeroes.position].color = 1;\r\n                    costs.push(originalMatrixColored[i][zeroes.position].cost);\r\n                    sum += originalMatrixColored[i][zeroes.position].cost;\r\n                    resultantMatrix[i][zeroes.position].color = 1;\r\n                    // console.log(assignedRowZero);\r\n                    // console.log(assignedColZero);\r\n                }\r\n            }\r\n\r\n            let costsString = costs.join(\" + \");\r\n\r\n            let content = (\r\n                <div>\r\n                    <Row>\r\n                        {`Now that we have minimum number of lines covering all zeroes equal to the number of tasks, \r\n                        we can assign tasks to machines such that one task is assigned to one machine only.`}\r\n                        <br />\r\n                        {`Now, we need to mark such zeroes in the optimal cost matrix, that there should be exactly one zero in each row and column.`}\r\n                        <MatrixToTableWithLines\r\n                            matrix={resultantMatrix}\r\n                            nRows={this.state.sliderValue}\r\n                            nCols={this.state.sliderValue}\r\n                            zeroMatrix={true}\r\n                        />\r\n                        <br />\r\n                        {`Comparing the values of marked cells with the original inputted matrix -`}\r\n                        <MatrixToTableWithLines\r\n                            matrix={originalMatrixColored}\r\n                            nRows={this.state.sliderValue}\r\n                            nCols={this.state.sliderValue}\r\n                            zeroMatrix={true}\r\n                        />\r\n                        <br />\r\n                        {`Add the optimally assigned costs - `}\r\n                        <br />\r\n                        {costsString + \" = \" + sum}\r\n                        <br />\r\n                        <br />\r\n                        {`Hence, the ${\r\n                            this.state.isOptimaMax ? \"maximum\" : \"minimum\"\r\n                        } cost to solve the given assignment problem is ${sum}.`}\r\n                    </Row>\r\n                </div>\r\n            );\r\n\r\n            if (!this.state.devTest) this.setState({ step4Content: content });\r\n            resolve(sum);\r\n        });\r\n    }\r\n\r\n    increaseZeroes(matrix) {\r\n        // TODO: Check for bugs\r\n        let intermediateMatrix = [];\r\n        let min = Number.MAX_VALUE;\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                if (matrix[i][j].coveredByLines == 0 && min > matrix[i][j].cost) {\r\n                    min = matrix[i][j].cost;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                if (matrix[i][j].coveredByLines == 0) {\r\n                    row.push(`${matrix[i][j].cost} - ${min} = ${matrix[i][j].cost - min}`);\r\n                    matrix[i][j].cost -= min;\r\n                } else if (matrix[i][j].coveredByLines == 2) {\r\n                    matrix[i][j].cost += min;\r\n                }\r\n                intermediateMatrix.push(row);\r\n            }\r\n        }\r\n        return { nMatrix: matrix, intermediateMatrix: intermediateMatrix, min: min };\r\n    }\r\n\r\n    numberOfZeroes(array, assignedRowZero) {\r\n        let n = 0;\r\n        let posn = -1;\r\n        for (let i = 0; i < array.length; i++)\r\n            if (array[i].cost == 0 && !assignedRowZero[i]) {\r\n                posn = i;\r\n                n++;\r\n            }\r\n        return { position: posn, num: n };\r\n    }\r\n\r\n    getMinLines(matrix) {\r\n        let newMatrix = [];\r\n        let crossedRows = [];\r\n        let crossedCols = [];\r\n        let assignedCols = [];\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            crossedRows.push(true);\r\n            crossedCols.push(false);\r\n            assignedCols.push(false);\r\n        }\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                row.push({ cost: matrix[i][j], assigned: false, coveredByLines: 0 });\r\n            }\r\n            newMatrix.push(row);\r\n        }\r\n\r\n        let isUpdated = true;\r\n        while (isUpdated) {\r\n            isUpdated = false;\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                let zeroes = this.numberOfZeroes(newMatrix[i], assignedCols);\r\n                if (zeroes.num == 1) {\r\n                    newMatrix[i][zeroes.position].assigned = true;\r\n                    assignedCols[zeroes.position] = true;\r\n                    crossedRows[i] = false;\r\n                    isUpdated = true;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let zeroes = this.numberOfZeroes(newMatrix[i], assignedCols);\r\n            if (zeroes.position != -1) {\r\n                newMatrix[i][zeroes.position].assigned = true;\r\n                assignedCols[zeroes.position] = true;\r\n                crossedRows[i] = false;\r\n            }\r\n        }\r\n\r\n        while (true) {\r\n            let prevCrossedCols = [];\r\n            let prevCrossedRows = [];\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                prevCrossedCols.push(crossedCols[i]);\r\n                prevCrossedRows.push(crossedRows[i]);\r\n            }\r\n\r\n            for (let i = 0; i < this.state.sliderValue; i++) {\r\n                // to check which rows are crossed\r\n                if (crossedRows[i] == true) {\r\n                    for (let j = 0; j < this.state.sliderValue; j++) {\r\n                        // iterate through each element in crossed row\r\n                        if (newMatrix[i][j].cost === 0) {\r\n                            crossedCols[j] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                // find crossed columns\r\n                if (crossedCols[j] == true) {\r\n                    for (let k = 0; k < this.state.sliderValue; k++) {\r\n                        // find 0s in crossed columns\r\n                        if (newMatrix[k][j].cost === 0 && newMatrix[k][j].assigned === true) {\r\n                            crossedRows[k] = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (\r\n                this.compareArray(prevCrossedCols, crossedCols) &&\r\n                this.compareArray(prevCrossedRows, crossedRows)\r\n            )\r\n                break;\r\n        }\r\n\r\n        let nLines = 0;\r\n\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            if (crossedRows[i] != true) {\r\n                nLines += 1;\r\n                for (let j = 0; j < this.state.sliderValue; j++) {\r\n                    if (crossedCols[j] == true) newMatrix[i][j].coveredByLines = 2;\r\n                    else newMatrix[i][j].coveredByLines = 1;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            if (crossedCols[i] == true) {\r\n                nLines += 1;\r\n                for (let j = 0; j < this.state.sliderValue; j++) {\r\n                    if (crossedRows[j] != true) newMatrix[j][i].coveredByLines = 2;\r\n                    else newMatrix[j][i].coveredByLines = 1;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            let line = \"\";\r\n            for (let j = 0; j < this.state.sliderValue; j++) {\r\n                line += newMatrix[i][j].coveredByLines + \"  \";\r\n            }\r\n        }\r\n\r\n        return { matrix: newMatrix, nLines: nLines };\r\n    }\r\n\r\n    compareArray(arr1, arr2) {\r\n        for (let i = 0; i < this.state.sliderValue; i++) {\r\n            if (arr1[i] != arr2[i]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    test(matrix, size) {\r\n        this.state.matrix = matrix;\r\n        this.state.sliderValue = size;\r\n        return this.solveStep1();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"content\"\r\n                style={{ minHeight: \"83vh\" }}\r\n                ref={(el) => (this.printRef = el)}\r\n            >\r\n                <Card\r\n                    title=\"Input Question\"\r\n                    content={\r\n                        <div>\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <Label for=\"nValue\">Enter number of tasks to be assigned</Label>\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <Slider\r\n                                                defaultValue={2}\r\n                                                value={this.state.sliderValue}\r\n                                                aria-labelledby=\"discrete-slider-custom\"\r\n                                                step={1}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                marks={this.marks}\r\n                                                min={2}\r\n                                                max={10}\r\n                                                onChange={this.handleSlider}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    style={{\r\n                                        display: this.state.isSliderSlided ? \"block\" : \"none\",\r\n                                    }}\r\n                                >\r\n                                    <Label for=\"nValue\">Enter cost matrix</Label>\r\n                                    <div\r\n                                        style={window.innerWidth >= 800 ? null : { marginLeft: 15 }}\r\n                                    >\r\n                                        {this.state.costMatrix}\r\n                                    </div>\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    style={{\r\n                                        display: this.state.isSliderSlided ? \"block\" : \"none\",\r\n                                        paddingLeft: 10,\r\n                                    }}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        control={\r\n                                            <Switch\r\n                                                size=\"medium\"\r\n                                                checked={this.state.isOptimaMax}\r\n                                                onChange={() => {\r\n                                                    this.setState((prevState) => {\r\n                                                        return {\r\n                                                            isOptimaMax: !prevState.isOptimaMax,\r\n                                                        };\r\n                                                    });\r\n                                                }}\r\n                                                name=\"showFailedTestcases\"\r\n                                                color=\"primary\"\r\n                                                inputProps={{\r\n                                                    \"aria-label\": \"secondary checkbox\",\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                        label=\"Maximize Cost\"\r\n                                    />\r\n                                </FormGroup>\r\n                                <FormGroup\r\n                                    style={{\r\n                                        display: this.state.isSliderSlided ? \"block\" : \"none\",\r\n                                    }}\r\n                                >\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        onClick={this.generateRandomValues}\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                        }}\r\n                                    >\r\n                                        Random Values{\" \"}\r\n                                        <i\r\n                                            className=\"fa fa-random\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>\r\n                                    </Button>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        onClick={\r\n                                            !this.state.isOptimaMax\r\n                                                ? this.solveStep1\r\n                                                : this.solveStep0\r\n                                        }\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                        }}\r\n                                    >\r\n                                        Solve{\" \"}\r\n                                        <i\r\n                                            className=\"fa fa-arrow-circle-o-right\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>\r\n                                    </Button>\r\n                                    <Button\r\n                                        color=\"danger\"\r\n                                        onClick={() => {\r\n                                            this.clearFields();\r\n                                        }}\r\n                                        style={{\r\n                                            display:\r\n                                                !this.state.step1Content == null\r\n                                                    ? \"none\"\r\n                                                    : \"inline\",\r\n                                        }}\r\n                                    >\r\n                                        Clear{\" \"}\r\n                                        <i\r\n                                            className=\"fa fa-trash-o\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>\r\n                                    </Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </div>\r\n                    }\r\n                />\r\n\r\n                <div\r\n                    style={{\r\n                        display: this.state.step0Content != null ? \"block\" : \"none\",\r\n                    }}\r\n                >\r\n                    <Card\r\n                        title={`Step ${this.state.step0Content ? 1 : 0}: Matrix Negation`}\r\n                        content={<Container>{this.state.step0Content}</Container>}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: this.state.step1Content != null ? \"block\" : \"none\",\r\n                    }}\r\n                >\r\n                    <Card\r\n                        title={`Step ${this.state.step0Content ? 2 : 1}: Row Minimization`}\r\n                        content={<Container>{this.state.step1Content}</Container>}\r\n                    />\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        display: this.state.step2Content != null ? \"block\" : \"none\",\r\n                    }}\r\n                >\r\n                    <Card\r\n                        title={`Step ${this.state.step0Content ? 3 : 2}: Column Minimization`}\r\n                        content={<Container>{this.state.step2Content}</Container>}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: this.state.step3Content != null ? \"block\" : \"none\",\r\n                    }}\r\n                >\r\n                    <Card\r\n                        title={`Step ${this.state.step0Content ? 4 : 3}: Drawing minimum lines`}\r\n                        content={<Container>{this.state.step3Content}</Container>}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: this.state.step4Content != null ? \"block\" : \"none\",\r\n                    }}\r\n                >\r\n                    <Card\r\n                        title={`Step ${this.state.step0Content ? 5 : 4}: Optimal Assignment`}\r\n                        content={<Container>{this.state.step4Content}</Container>}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HungarianAlgo;\r\n\r\n// 21-95-90-47-56-72-99-49--77-15-71-74-96-69-47-75--17-52-75-84-98-97-96-85--74-42-6-56-82-14-81-69--48-98-7-18-40-4-36-91--27-91-40-69-83-47-81-40--3-23-20-37-96-48-81-33--69-9-49-63-99-64-98-24--\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\n\r\nexport default class NWC extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(\"props\", this.props);\r\n        this.state = {\r\n            matrix: this.props.matrix,\r\n            nSupply: this.props.nRows,\r\n            nDemand: this.props.nCols,\r\n            flag: 0,\r\n            sum: 0,\r\n            content: [],\r\n        };\r\n        for (let i = 0; i < this.props.nRows; i++) {\r\n            for (let j = 0; j < this.props.nCols; j++) {\r\n                this.state.matrix[i][j] = \"\" + this.state.matrix[i][j];\r\n            }\r\n        }\r\n        for (let i = 0; i < this.props.nRows; i++)\r\n            this.state.matrix[i][this.props.nCols] = \"\" + this.props.supply[i];\r\n        for (let i = 0; i < this.props.nCols; i++)\r\n            this.state.matrix[this.props.nRows][i] = \"\" + this.props.demand[i];\r\n\r\n        this.lastElement();\r\n    }\r\n\r\n    lastElement() {\r\n        return new Promise((resolve, reject) => {\r\n            let s1 = 0;\r\n            let s2 = 0;\r\n\r\n            let givenMatrix = [];\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                    else row.push(this.state.matrix[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">Given cost matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (j == this.state.nDemand && i != this.state.nSupply)\r\n                        s1 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n\r\n                    if (i == this.state.nSupply && j != this.state.nDemand)\r\n                        s2 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) {\r\n                        if (s1 == s2) this.state.matrix[i][j] = \"\";\r\n                        else {\r\n                            this.state.flag = 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let finalMatrix = [];\r\n            let finalMatrix1 = [];\r\n            let initialMatrix = [];\r\n            for (let i = 0; i < 10; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < 10; j++) {\r\n                    row.push(0);\r\n                }\r\n                finalMatrix.push(row);\r\n                initialMatrix.push(row);\r\n                finalMatrix1.push(row);\r\n            }\r\n\r\n            if (this.state.flag == 0) {\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        finalMatrix[i][j] = this.state.matrix[i][j];\r\n                        finalMatrix1[i][j] = parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        initialMatrix[i][j] = this.state.matrix[i][j];\r\n                    }\r\n                }\r\n\r\n                resolve(this.northWest(initialMatrix));\r\n            } else {\r\n                let content = this.state.content;\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">The given cost matrix is unbalanced.</span> <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n                this.props.canProceed(false);\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n\r\n    display = (matrix) => {\r\n        let content = this.state.content;\r\n\r\n        let matrixColHeaders = [];\r\n        let matrixRowHeaders = [];\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n        matrixRowHeaders.push(\"Demand\");\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n        matrixColHeaders.push(\"Supply\");\r\n        let matrixToDisplay = (\r\n            <MatrixToTable\r\n                matrix={matrix}\r\n                rowHeaders={matrixRowHeaders}\r\n                colHeaders={matrixColHeaders}\r\n                nCols={this.state.nDemand + 1}\r\n                nRows={this.state.nSupply + 1}\r\n            />\r\n        );\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">{matrixToDisplay}</span> <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    };\r\n\r\n    northWest(intermediateMatrix) {\r\n        let st = 0;\r\n\r\n        let ns = this.state.nSupply;\r\n        let nd = this.state.nDemand;\r\n\r\n        if (this.state.flag == 0) {\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row style={{ marginBottom: 20 }}>\r\n                    <span className=\"text\">\r\n                        Initially, we select upper left cell(a.k.a North West cell) and allocate\r\n                        minimum of the corresponding supply or demand for that cell. The minimum\r\n                        value is subtracted from supply as well as demand. If, the corresponding\r\n                        supply and/or demand is exhausted, we discard the corresponding row and/or\r\n                        column.\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            let i = 0,\r\n                j = 0;\r\n            while (i < this.state.nSupply && j < this.state.nDemand) {\r\n                let elementA = parseInt(\"\" + intermediateMatrix[ns][j], 10);\r\n                let elementB = parseInt(\"\" + intermediateMatrix[i][nd], 10);\r\n\r\n                if (intermediateMatrix[ns][j] != \"--\" && intermediateMatrix[i][nd] != \"--\") {\r\n                    //iterating through cells\r\n                    if (elementA < elementB) {\r\n                        // allocating on that cell  so that no allocation in same row\r\n                        let s = this.state.sum;\r\n                        s += parseInt(\"\" + intermediateMatrix[i][j], 10) * elementA;\r\n                        this.setState({ sum: s });\r\n\r\n                        let content = this.state.content;\r\n                        st += 1;\r\n\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the most upper left cell which is neither\r\n                                    allocated nor discarded. In our case such cell is available\r\n                                    at (${i + 1}, ${j + 1}). The corresponding supply is ${\r\n                                        intermediateMatrix[i][this.state.nDemand]\r\n                                    } and demand is ${intermediateMatrix[this.state.nSupply][j]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Demand: ${\r\n                                        intermediateMatrix[this.state.nSupply][j]\r\n                                    }). We subtract this value from \r\n                                    the respective supply as well as demand and discard the \r\n                                    unallocated values from discarded row and/or column.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n\r\n                        intermediateMatrix[i][j] =\r\n                            intermediateMatrix[i][j] + \"(\" + intermediateMatrix[ns][j] + \")\";\r\n                        if (elementB - elementA > 0) {\r\n                            intermediateMatrix[i][nd] = \"\" + elementB - elementA;\r\n\r\n                            for (let index = i + 1; index < this.state.nSupply; index++) {\r\n                                intermediateMatrix[index][j] = \"--\";\r\n                            }\r\n                            intermediateMatrix[this.state.nSupply][j] = 0;\r\n                        } else {\r\n                            for (let index = j + 1; index < this.state.nDemand; index++) {\r\n                                intermediateMatrix[i][index] = \"--\";\r\n                            }\r\n                            for (let index = i + 1; index < this.state.nSupply; index++) {\r\n                                intermediateMatrix[index][j] = \"--\";\r\n                            }\r\n                            intermediateMatrix[i][this.state.nDemand] = 0;\r\n                            intermediateMatrix[this.state.nSupply][j] = 0;\r\n\r\n                            i += 1;\r\n                        }\r\n\r\n                        j += 1;\r\n                    } else {\r\n                        //allocating on that cell  so that no allocation in same col\r\n                        let s = this.state.sum;\r\n\r\n                        s += parseInt(\"\" + intermediateMatrix[i][j], 10) * elementB;\r\n\r\n                        s = isNaN(this.state.sum) ? s : this.state.sum;\r\n                        this.setState({ sum: s });\r\n\r\n                        let content = this.state.content;\r\n                        st += 1;\r\n\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the most upper left cell which is neither\r\n                                    allocated nor discarded. In our case such cell is available\r\n                                    at (${i + 1}, ${j + 1}). The corresponding supply is ${\r\n                                        intermediateMatrix[i][this.state.nDemand]\r\n                                    } and demand is ${intermediateMatrix[this.state.nSupply][j]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Supply: ${\r\n                                        intermediateMatrix[i][this.state.nDemand]\r\n                                    }). We subtract this value from \r\n                                    the respective supply as well as demand and discard the \r\n                                    unallocated values from discarded row and/or column.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n\r\n                        intermediateMatrix[i][j] =\r\n                            intermediateMatrix[i][j] + \"(\" + intermediateMatrix[i][nd] + \")\";\r\n                        if (elementA - elementB > 0) {\r\n                            intermediateMatrix[ns][j] = \"\" + (elementA - elementB);\r\n\r\n                            for (let index = j + 1; index < this.state.nDemand; index++) {\r\n                                intermediateMatrix[i][index] = \"--\";\r\n                            }\r\n                            intermediateMatrix[i][this.state.nDemand] = 0;\r\n                        } else {\r\n                            for (let index = i + 1; index < this.state.nSupply; index++) {\r\n                                intermediateMatrix[index][j] = \"--\";\r\n                            }\r\n                            for (let index = j + 1; index < this.state.nDemand; index++) {\r\n                                intermediateMatrix[i][index] = \"--\";\r\n                            }\r\n                            intermediateMatrix[this.state.nSupply][j] = 0;\r\n                            intermediateMatrix[i][this.state.nDemand] = 0;\r\n                            j += 1;\r\n                        }\r\n\r\n                        i += 1;\r\n                    }\r\n                }\r\n\r\n                let matrixToDisplay = intermediateMatrix.map((arr, i) => {\r\n                    console.log(arr);\r\n                    if (arr != null)\r\n                        return arr.map((element, j) => {\r\n                            if (element != null)\r\n                                return {\r\n                                    cost: element == \"--\" ? this.state.matrix[i][j] : element,\r\n                                    coveredByLines: (\"\" + element).includes(\"(\")\r\n                                        ? 2\r\n                                        : element == \"--\"\r\n                                        ? 1\r\n                                        : 0,\r\n                                };\r\n                            else return null;\r\n                        });\r\n                    return null;\r\n                });\r\n                let matrixColHeaders = [];\r\n                let matrixRowHeaders = [];\r\n\r\n                for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n                matrixRowHeaders.push(\"Demand\");\r\n\r\n                for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n                matrixColHeaders.push(\"Supply\");\r\n                matrixToDisplay = (\r\n                    <MatrixToTableWithLines\r\n                        matrix={matrixToDisplay}\r\n                        rowHeaders={matrixRowHeaders}\r\n                        colHeaders={matrixColHeaders}\r\n                        nCols={this.state.nDemand + 1}\r\n                        nRows={this.state.nSupply + 1}\r\n                    />\r\n                );\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">{matrixToDisplay}</span> <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n            }\r\n\r\n            return this.totalCost(intermediateMatrix);\r\n        }\r\n    }\r\n\r\n    totalCost(finalMatrix) {\r\n        this.props.callbackFunction(finalMatrix);\r\n        return new Promise((_resolve, _reject) => {\r\n            let mat;\r\n            let count = 0;\r\n            let content = this.state.content;\r\n\r\n            let sum = 0;\r\n            for (let i = 0; i < this.state.nSupply; i++) {\r\n                for (let j = 0; j < this.state.nDemand; j++) {\r\n                    if (finalMatrix[i][j] != \"--\") {\r\n                        count++;\r\n                        if (i == 0 && j == 0) {\r\n                            mat = finalMatrix[i][j];\r\n                        } else {\r\n                            mat = mat + \" + \" + finalMatrix[i][j];\r\n                        }\r\n                        let a = finalMatrix[i][j].split(\"(\")[0];\r\n                        let b = finalMatrix[i][j].split(\"(\")[1].split(\")\")[0];\r\n                        sum += parseInt(a, 10) * parseInt(b, 10);\r\n                    }\r\n                }\r\n            }\r\n\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`The minimum total transportation cost is : ${mat} = ${sum}`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            if (count == this.state.nSupply + this.state.nDemand - 1) {\r\n                content = this.state.content;\r\n                content.push(\r\n                    <Row style={{ marginBottom: 5 }}>\r\n                        <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                            this.state.nSupply\r\n                        } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }. Since, this value is equal to the number of allocated cells, \r\n                        the solution is non degenerate. Therefore, the solution is optimal and \r\n                        we need not proceed further with any optimal methods.`}</span>{\" \"}\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n                this.props.canProceed(false);\r\n            } else {\r\n                content = this.state.content;\r\n                content.push(\r\n                    <Row style={{ marginBottom: 5 }}>\r\n                        <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                            this.state.nSupply\r\n                        } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }.\\n Since, this value is not equal to the number of allocated cells, \r\n                        the solution is degenerate and not yet optimal.\r\n                        Hence, we need to proceed further in order to get the optimal solution.`}</span>{\" \"}\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nexport default class MatrixMinimaMethod extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: null,\r\n            nSupply: this.props.nRows,\r\n            nDemand: this.props.nCols,\r\n            supply: [],\r\n            demand: [],\r\n            content: [],\r\n            flag: 0,\r\n            sum: 0,\r\n        };\r\n        let matrix = [];\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.state.nDemand; j++) row.push(this.props.matrix[i][j]);\r\n            matrix.push(row);\r\n        }\r\n        for (let i = 0; i < this.state.nSupply; i++) this.state.supply.push(this.props.supply[i]);\r\n        for (let j = 0; j < this.state.nDemand; j++) this.state.demand.push(this.props.demand[j]);\r\n        this.state.matrix = matrix;\r\n\r\n        this.isBalanced();\r\n    }\r\n\r\n    isBalanced() {\r\n        let sumSupply = 0;\r\n\r\n        let sumDemand = 0;\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            sumSupply += this.props.supply[i];\r\n        }\r\n        for (let i = 0; i < this.state.nDemand; i++) {\r\n            sumDemand += this.props.demand[i];\r\n        }\r\n        let matrixColHeaders = [];\r\n        let matrixRowHeaders = [];\r\n        for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n        matrixRowHeaders.push(\"Demand\");\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n        matrixColHeaders.push(\"Supply\");\r\n        let initialMatrix = this.mergeSuppyDemand();\r\n        console.log(\"====>\", initialMatrix);\r\n        initialMatrix = (\r\n            <MatrixToTable\r\n                matrix={initialMatrix}\r\n                rowHeaders={matrixRowHeaders}\r\n                colHeaders={matrixColHeaders}\r\n                nCols={this.state.nDemand + 1}\r\n                nRows={this.state.nSupply + 1}\r\n            />\r\n        );\r\n\r\n        let content = this.state.content;\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">Given cost matrix is -</span> <br />\r\n                {initialMatrix}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n\r\n        if (sumSupply === sumDemand) {\r\n            console.log(\"Balanced \", sumSupply, sumDemand);\r\n\r\n            this.matrixMinima();\r\n        } else {\r\n            console.log(\"Unbalanced\");\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">The given cost matrix is unbalanced.</span> <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            this.props.canProceed(false);\r\n        }\r\n    }\r\n\r\n    mergeSuppyDemand() {\r\n        let mergedMatrix = this.state.matrix.map((arr) => arr.map((element) => \"\" + element));\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++)\r\n            mergedMatrix[i].push(\"\" + this.state.supply[i]);\r\n\r\n        mergedMatrix.push([...this.state.demand.map((element) => \"\" + element), \"\"]);\r\n        return mergedMatrix;\r\n    }\r\n\r\n    matrixMinima() {\r\n        let content = this.state.content;\r\n        content.push(\r\n            <Row style={{ marginBottom: 20 }}>\r\n                <span className=\"text\">\r\n                    Initially, we select the least element from the matrix and allocate minimum of\r\n                    the corresponding supply or demand for that cell. The minimum value is\r\n                    subtracted from supply as well as demand. If, the corresponding supply and/or\r\n                    demand is exhausted, we discard the corresponding row and/or column.\r\n                </span>{\" \"}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n        let cost = 0;\r\n        let demandExhaust = [];\r\n        let supplyExhaust = [];\r\n        let st = 0;\r\n        let assignedPosition = [];\r\n        let assignedValues = {};\r\n        while (!this.isExhausted(this.props.supply, this.props.demand)) {\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span style={{ fontSize: 18 }}>{`Iteration ${++st}`}</span>\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            let min = this.findMin();\r\n            assignedPosition.push([min[1], min[2]]);\r\n\r\n            if (this.state.demand[min[2]] < this.state.supply[min[1]]) {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            Now, we look for the smallest cost in the matrix which is neither\r\n                            allocated nor discarded. In our case such cell is available at ({min[1]}\r\n                            ,{min[2]}\r\n                            ). The corresponding supply is {this.state.supply[min[1]]} and demand is{\" \"}\r\n                            {this.state.demand[min[2]]}. Then, we allocate the minimum of these(i.e.\r\n                            Demand: {this.state.demand[min[2]]}) to the cell ({min[1]},{min[2]}\r\n                            ). We subtract {this.state.demand[min[2]]} from the respective supply as\r\n                            well as demand and discard the unallocated values from exhausted\r\n                            row/column.\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.state.supply[min[1]] = this.state.supply[min[1]] - this.state.demand[min[2]];\r\n                console.log(this.state.demand[min[2]], min[0]);\r\n                assignedValues[min[1] + \",\" + min[2]] =\r\n                    min[0] + \"(\" + this.state.demand[min[2]] + \")\";\r\n                cost += this.state.demand[min[2]] * min[0];\r\n                this.state.demand[min[2]] = 0;\r\n                demandExhaust.push(min[2]);\r\n            } else if (this.state.demand[min[2]] > this.state.supply[min[1]]) {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            Now, we look for the smallest cost in the matrix which is neither\r\n                            allocated nor discarded. In our case such cell is available at ({min[1]}\r\n                            ,{min[2]}\r\n                            ). The corresponding supply is {this.state.supply[min[1]]} and demand is{\" \"}\r\n                            {this.state.demand[min[2]]}. Then, we allocate the minimum of these(i.e.\r\n                            Supply: {this.state.supply[min[1]]}) to the cell ({min[1]},{min[2]}\r\n                            ). We subtract {this.state.supply[min[1]]} from the respective supply as\r\n                            well as demand and discard the unallocated values from exhausted\r\n                            row/column.\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.state.demand[min[2]] = this.state.demand[min[2]] - this.state.supply[min[1]];\r\n                console.log(this.state.supply[min[1]], min[0]);\r\n                assignedValues[min[1] + \",\" + min[2]] =\r\n                    min[0] + \"(\" + this.state.supply[min[1]] + \")\";\r\n                cost += this.state.supply[min[1]] * min[0];\r\n                this.state.supply[min[1]] = 0;\r\n                supplyExhaust.push(min[1]);\r\n            } else {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            Now, we look for the smallest cost in the matrix which is neither\r\n                            allocated nor discarded. In our case such cell is available at ({min[1]}\r\n                            ,{min[2]}\r\n                            ). The corresponding supply is {this.state.supply[min[1]]} and demand is{\" \"}\r\n                            {this.state.demand[min[2]]}. Then, we allocate the minimum of these(i.e.\r\n                            Supply: {this.state.supply[min[1]]}) to the cell ({min[1]},{min[2]}\r\n                            ). We subtract {this.state.supply[min[1]]} from the respective supply as\r\n                            well as demand and discard the unallocated values from exhausted\r\n                            row/column.\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                console.log(this.state.supply[min[1]], min[0]);\r\n                assignedValues[min[1] + \",\" + min[2]] =\r\n                    min[0] + \"(\" + this.state.supply[min[1]] + \")\";\r\n                cost += this.state.supply[min[1]] * min[0];\r\n                this.state.supply[min[1]] = 0;\r\n                this.state.demand[min[2]] = 0;\r\n                demandExhaust.push(min[2]);\r\n                supplyExhaust.push(min[1]);\r\n            }\r\n\r\n            this.display(assignedPosition, assignedValues);\r\n        }\r\n        let mat = \"\";\r\n        for (let i = 0; i < assignedPosition.length; i++)\r\n            mat += assignedValues[assignedPosition[i][0] + \",\" + assignedPosition[i][1]] + \" + \";\r\n        mat = mat.substring(0, mat.length - 3);\r\n\r\n        console.log(cost);\r\n        content = this.state.content;\r\n        content.push(\r\n            <Row style={{ marginBottom: 5 }}>\r\n                <span className=\"text\">{`The minimum total transportation cost is : ${mat} = ${cost}`}</span>{\" \"}\r\n                <br />\r\n            </Row>,\r\n        );\r\n\r\n        this.setState({ content: content });\r\n        if (st == this.props.nRows + this.props.nCols - 1) {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }. Since, this value is equal to the number of allocated cells, \r\n                        the solution is non degenerate. Therefore, the solution is optimal and \r\n                        we need not proceed further with any optimal methods.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            this.props.canProceed(false);\r\n        } else {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }.\\n Since, this value is not equal to the number of allocated cells, \r\n                        the solution is degenerate and not yet optimal.\r\n                        Hence, we need to proceed further in order to get the optimal solution.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n        }\r\n    }\r\n\r\n    display(assignedPosition, assignedValues) {\r\n        let matrix = this.state.matrix.map((arr) => arr.map((element) => element));\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            matrix[i].push(this.state.supply[i]);\r\n        }\r\n        matrix.push([...this.state.demand, \"\"]);\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++)\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                let ak = assignedPosition.filter((arr) => arr[0] == i && arr[1] == j);\r\n                if (ak.length !== 0) {\r\n                    matrix[i][j] = assignedValues[i + \",\" + j];\r\n                    console.log(\"+++\", assignedValues[i + \",\" + j]);\r\n                }\r\n            }\r\n        this.props.callbackFunction(matrix);\r\n        let matrixColHeaders = [];\r\n        let matrixRowHeaders = [];\r\n        for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n        matrixRowHeaders.push(\"Demand\");\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n        matrixColHeaders.push(\"Supply\");\r\n\r\n        let matrixwithLines = matrix.map((arr, i) =>\r\n            arr.map((element, j) => {\r\n                if (i == this.state.nSupply)\r\n                    if (this.state.demand[j] == 0)\r\n                        return {\r\n                            cost: element,\r\n                            coveredByLines: 1,\r\n                        };\r\n                    else\r\n                        return {\r\n                            cost: element,\r\n                            coveredByLines: 0,\r\n                        };\r\n                else if (j == this.state.nDemand)\r\n                    if (this.state.supply[i] == 0)\r\n                        return {\r\n                            cost: element,\r\n                            coveredByLines: 1,\r\n                        };\r\n                    else\r\n                        return {\r\n                            cost: element,\r\n                            coveredByLines: 0,\r\n                        };\r\n                else if ((element + \"\").indexOf(\"(\") !== -1)\r\n                    return {\r\n                        cost: matrix[i][j],\r\n                        coveredByLines: 2,\r\n                    };\r\n                else if (this.state.supply[i] == 0 || this.state.demand[j] == 0)\r\n                    return {\r\n                        cost: matrix[i][j],\r\n                        coveredByLines: 1,\r\n                    };\r\n                else\r\n                    return {\r\n                        cost: matrix[i][j],\r\n                        coveredByLines: 0,\r\n                    };\r\n            }),\r\n        );\r\n        matrix = (\r\n            <MatrixToTableWithLines\r\n                matrix={matrixwithLines}\r\n                rowHeaders={matrixRowHeaders}\r\n                colHeaders={matrixColHeaders}\r\n                nCols={this.state.nDemand + 1}\r\n                nRows={this.state.nSupply + 1}\r\n            />\r\n        );\r\n\r\n        let content = this.state.content;\r\n\r\n        content.push(\r\n            <Row>\r\n                {matrix}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    }\r\n\r\n    findMin() {\r\n        let min = [Number.MAX_SAFE_INTEGER, 0, 0];\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if (\r\n                    this.state.matrix[i][j] < min[0] &&\r\n                    this.state.supply[i] != 0 &&\r\n                    this.state.demand[j] != 0\r\n                ) {\r\n                    min[0] = this.state.matrix[i][j];\r\n                    min[1] = i;\r\n                    min[2] = j;\r\n                } else if (\r\n                    this.state.matrix[i][j] == min[0] &&\r\n                    this.state.supply[i] != 0 &&\r\n                    this.state.demand[j] != 0\r\n                ) {\r\n                    if (\r\n                        Math.min(this.state.supply[i], this.state.demand[j]) >\r\n                        Math.min(this.state.supply[min[1]], this.state.demand[min[2]])\r\n                    ) {\r\n                        min[0] = this.state.matrix[i][j];\r\n                        min[1] = i;\r\n                        min[2] = j;\r\n                    } else continue;\r\n                } else continue;\r\n            }\r\n        }\r\n        return min;\r\n    }\r\n\r\n    isExhausted(supply, demand) {\r\n        let exhaust = true;\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            if (this.state.supply[i] != 0) exhaust = false;\r\n        }\r\n        for (let i = 0; i < this.state.nDemand; i++) {\r\n            if (this.state.demand[i] != 0) exhaust = false;\r\n        }\r\n        return exhaust;\r\n    }\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nexport default class RowMinimaMethod extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: props.matrix,\r\n            nSupply: props.nRows,\r\n            nDemand: props.nCols,\r\n            content: [],\r\n            flag: 0,\r\n            sum: 0,\r\n        };\r\n        this.props = props;\r\n        for (let i = 0; i < this.props.nRows; i++)\r\n            for (let j = 0; j < this.props.nCols; j++)\r\n                this.state.matrix[i][j] = \"\" + this.state.matrix[i][j];\r\n\r\n        for (let i = 0; i < this.props.nRows; i++)\r\n            this.state.matrix[i][this.props.nCols] = \"\" + this.props.supply[i];\r\n        for (let i = 0; i < this.props.nCols; i++)\r\n            this.state.matrix[this.props.nRows][i] = \"\" + this.props.demand[i];\r\n\r\n        // console.log(\"===================================\", this.state.matrix);\r\n        this.lastElement();\r\n    }\r\n\r\n    lastElement() {\r\n        return new Promise((resolve, reject) => {\r\n            let s1 = 0;\r\n            let s2 = 0;\r\n\r\n            let givenMatrix = [];\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                    else row.push(this.state.matrix[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n\r\n            // console.log(givenMatrix);\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">Given cost matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (j == this.state.nDemand && i != this.state.nSupply)\r\n                        s1 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n\r\n                    if (i == this.state.nSupply && j != this.state.nDemand)\r\n                        s2 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) {\r\n                        if (s1 == s2) this.state.matrix[i][j] = \"\";\r\n                        else {\r\n                            this.state.flag = 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let finalMatrix = [];\r\n            let finalMatrix1 = [];\r\n            let initialMatrix = [];\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row1 = [];\r\n                let row2 = [];\r\n                let row3 = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    row1.push(0);\r\n                    row2.push(0);\r\n                    row3.push(0);\r\n                }\r\n                finalMatrix.push(row1);\r\n                initialMatrix.push(row2);\r\n                finalMatrix1.push(row3);\r\n            }\r\n\r\n            if (this.state.flag == 0) {\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        finalMatrix[i][j] = this.state.matrix[i][j];\r\n                        finalMatrix1[i][j] = parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        initialMatrix[i][j] = this.state.matrix[i][j];\r\n                    }\r\n                }\r\n\r\n                resolve(this.rowMinima(initialMatrix));\r\n            } else {\r\n                let content = this.state.content;\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">The given cost matrix is unbalanced.</span> <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n                this.props.canProceed(false);\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n    display = (matrix) => {\r\n        let content = this.state.content;\r\n\r\n        let matrixColHeaders = [];\r\n        let matrixRowHeaders = [];\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n        matrixRowHeaders.push(\"Demand\");\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n        matrixColHeaders.push(\"Supply\");\r\n        let matrixToDisplay = (\r\n            <MatrixToTable\r\n                matrix={matrix}\r\n                rowHeaders={matrixRowHeaders}\r\n                colHeaders={matrixColHeaders}\r\n                nCols={this.state.nDemand + 1}\r\n                nRows={this.state.nSupply + 1}\r\n            />\r\n        );\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">{matrixToDisplay}</span> <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    };\r\n\r\n    rowMinima(intermediate) {\r\n        let temp,\r\n            ns = this.state.nSupply,\r\n            nd = this.state.nDemand,\r\n            sum = this.state.sum;\r\n        let st = 0;\r\n        if (this.state.flag == 0) {\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row style={{ marginBottom: 20 }}>\r\n                    <span className=\"text\">\r\n                        Initially, we select the least element from the first row and allocate\r\n                        minimum of the corresponding supply or demand for that cell. The minimum\r\n                        value is subtracted from supply as well as demand. If, the corresponding\r\n                        supply and/or demand is exhausted, we discard the corresponding row and/or\r\n                        column. And then we proceed to the next row.\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            for (let i = 0; i < ns; i++) {\r\n                let supply = intermediate[i][nd];\r\n                while (supply != \"--\") {\r\n                    let minima = Number.MAX_SAFE_INTEGER;\r\n                    for (let j = 0; j < nd; j++) {\r\n                        if (\r\n                            !intermediate[i][j].includes(\"(\") &&\r\n                            atoi(\"\" + intermediate[i][j]) < minima &&\r\n                            intermediate[ns][j] != \"--\"\r\n                        ) {\r\n                            minima = atoi(\"\" + intermediate[i][j]);\r\n                            temp = j;\r\n                        }\r\n                    }\r\n                    if (atoi(\"\" + intermediate[ns][temp]) < atoi(\"\" + intermediate[i][nd])) {\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${++st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the smallest cost in the row - ${\r\n                                        i + 1\r\n                                    } which is neither\r\n                                        allocated nor discarded. In our case such cell is available\r\n                                        at (${i + 1}, ${temp + 1}). The corresponding supply is ${\r\n                                        intermediate[i][this.state.nDemand]\r\n                                    } and demand is ${intermediate[this.state.nSupply][temp]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Demand: ${\r\n                                        intermediate[this.state.nSupply][temp]\r\n                                    } to the cell (${i + 1},${temp + 1}). We subtract ${\r\n                                        intermediate[this.state.nSupply][temp]\r\n                                    } from \r\n                                        the respective supply as well as demand and discard the \r\n                                        unallocated values from exhausted column. Now if the supply is not exhausted, then we will continue in the same row/column otherwise we will move to the next row.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n                        intermediate[i][temp] =\r\n                            intermediate[ns][temp] + \"(\" + intermediate[i][temp] + \")\";\r\n                        if (\r\n                            atoi(\"\" + intermediate[i][nd]) - atoi(\"\" + intermediate[ns][temp]) >\r\n                            0\r\n                        ) {\r\n                            intermediate[i][nd] =\r\n                                \"\" +\r\n                                (atoi(\"\" + intermediate[i][nd]) -\r\n                                    atoi(\"\" + intermediate[ns][temp]));\r\n                        } else {\r\n                            intermediate[i][nd] = \"--\";\r\n                        }\r\n                        intermediate[ns][temp] = \"--\";\r\n                    } else {\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${++st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the smallest cost in the row - ${\r\n                                        i + 1\r\n                                    } which is neither\r\n                                        allocated nor discarded. In our case such cell is available\r\n                                        at (${i + 1}, ${temp + 1}). The corresponding supply is ${\r\n                                        intermediate[i][this.state.nDemand]\r\n                                    } and demand is ${intermediate[this.state.nSupply][temp]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Supply: ${\r\n                                        intermediate[i][this.state.nDemand]\r\n                                    } to the cell (${i + 1},${temp + 1}). We subtract ${\r\n                                        intermediate[i][this.state.nDemand]\r\n                                    } from \r\n                                        the respective supply as well as demand and discard the \r\n                                        unallocated values from exhausted row. Now if the supply is not exhausted, then we will continue in the same row/column otherwise we will move to the next row.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n                        intermediate[i][temp] =\r\n                            intermediate[i][nd] + \"(\" + intermediate[i][temp] + \")\";\r\n                        if (\r\n                            atoi(\"\" + intermediate[ns][temp]) - atoi(\"\" + intermediate[i][nd]) >\r\n                            0\r\n                        ) {\r\n                            intermediate[ns][temp] =\r\n                                \"\" +\r\n                                (atoi(\"\" + intermediate[ns][temp]) -\r\n                                    atoi(\"\" + intermediate[i][nd]));\r\n                        } else {\r\n                            intermediate[ns][temp] = \"--\";\r\n                        }\r\n                        intermediate[i][nd] = \"--\";\r\n                    }\r\n                    supply = intermediate[i][nd];\r\n                    content = this.state.content;\r\n\r\n                    let matrixToDisplay = intermediate.map((arr, i) => {\r\n                        if (arr != null)\r\n                            return arr.map((element, j) => {\r\n                                if (element != null) {\r\n                                    if ((\"\" + element).includes(\"(\")) {\r\n                                        return {\r\n                                            cost: element,\r\n                                            coveredByLines: 2,\r\n                                        };\r\n                                    } else if (element == \"--\") {\r\n                                        return {\r\n                                            cost: 0,\r\n                                            coveredByLines: 1,\r\n                                        };\r\n                                    } else {\r\n                                        if (\r\n                                            intermediate[i][this.state.nDemand] == \"--\" ||\r\n                                            intermediate[this.state.nSupply][j] == \"--\"\r\n                                        ) {\r\n                                            return {\r\n                                                cost: element,\r\n                                                coveredByLines: 1,\r\n                                            };\r\n                                        } else {\r\n                                            return {\r\n                                                cost: element,\r\n                                                coveredByLines: 0,\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        return null;\r\n                    });\r\n\r\n                    let matrixColHeaders = [];\r\n                    let matrixRowHeaders = [];\r\n\r\n                    for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n                    matrixRowHeaders.push(\"Demand\");\r\n\r\n                    for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n                    matrixColHeaders.push(\"Supply\");\r\n                    matrixToDisplay = (\r\n                        <MatrixToTableWithLines\r\n                            matrix={matrixToDisplay}\r\n                            rowHeaders={matrixRowHeaders}\r\n                            colHeaders={matrixColHeaders}\r\n                            nCols={this.state.nDemand + 1}\r\n                            nRows={this.state.nSupply + 1}\r\n                        />\r\n                    );\r\n                    content.push(\r\n                        <Row>\r\n                            <span className=\"text\">{matrixToDisplay}</span> <br />\r\n                        </Row>,\r\n                    );\r\n                    this.setState({ content: content });\r\n                }\r\n            }\r\n\r\n            this.totalCost(intermediate);\r\n        }\r\n    }\r\n\r\n    totalCost(finalMatrix) {\r\n        this.props.callbackFunction(finalMatrix);\r\n        let mat;\r\n        let count = 0;\r\n        let nd = this.state.nDemand;\r\n        let ns = this.state.nSupply;\r\n        let content = this.state.content;\r\n\r\n        for (let i = 0; i < ns; i++) {\r\n            for (let j = 0; j < nd; j++) {\r\n                if (\r\n                    finalMatrix[i][j] != \"--\" &&\r\n                    finalMatrix[i][j].indexOf(\"(\") < finalMatrix[i][j].length\r\n                ) {\r\n                    count++;\r\n                    if (i == 0 && j == 0) {\r\n                        mat = finalMatrix[i][j];\r\n                    } else {\r\n                        mat = mat + \" + \" + finalMatrix[i][j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let mat1 = mat.split(\" + \");\r\n        mat = \"\";\r\n        let sum = 0;\r\n        count = 0;\r\n        for (let index = 0; index < mat1.length; index++) {\r\n            if (mat1[index].includes(\"(\")) {\r\n                count += 1;\r\n                sum +=\r\n                    atoi(mat1[index].split(\"(\")[0]) * atoi(mat1[index].split(\"(\")[1].split(\")\")[0]);\r\n                mat += mat1[index] + \" + \";\r\n            }\r\n        }\r\n\r\n        mat = mat.substring(0, mat.length - 3);\r\n        content = this.state.content;\r\n        content.push(\r\n            <Row style={{ marginBottom: 5 }}>\r\n                <span className=\"text\">{`The minimum total transportation cost is : ${mat} = ${sum}`}</span>{\" \"}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n        if (count == ns + nd - 1) {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }. Since, this value is equal to the number of allocated cells, \r\n                        the solution is non degenerate. Therefore, the solution is optimal and \r\n                        we need not proceed further with any optimal methods.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            this.props.canProceed(false);\r\n        } else {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }.\\n Since, this value is not equal to the number of allocated cells, \r\n                        the solution is degenerate and not yet optimal.\r\n                        Hence, we need to proceed further in order to get the optimal solution.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\n\r\nconst atoi = (string) => parseInt(string, 10);\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nexport default class ColumnMinima extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: props.matrix,\r\n            nSupply: props.nRows,\r\n            nDemand: props.nCols,\r\n            content: [],\r\n            flag: 0,\r\n            sum: 0,\r\n        };\r\n        this.props = props;\r\n        for (let i = 0; i < this.props.nRows; i++)\r\n            for (let j = 0; j < this.props.nCols; j++)\r\n                this.state.matrix[i][j] = \"\" + this.state.matrix[i][j];\r\n\r\n        for (let i = 0; i < this.props.nRows; i++)\r\n            this.state.matrix[i][this.props.nCols] = \"\" + this.props.supply[i];\r\n        for (let i = 0; i < this.props.nCols; i++)\r\n            this.state.matrix[this.props.nRows][i] = \"\" + this.props.demand[i];\r\n\r\n        console.log(\"===================================\", this.state.matrix);\r\n        this.lastElement();\r\n    }\r\n\r\n    lastElement() {\r\n        return new Promise((resolve, reject) => {\r\n            let s1 = 0;\r\n            let s2 = 0;\r\n\r\n            let givenMatrix = [];\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                    else row.push(this.state.matrix[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n\r\n            console.log(givenMatrix);\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">Given cost matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (j == this.state.nDemand && i != this.state.nSupply)\r\n                        s1 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n\r\n                    if (i == this.state.nSupply && j != this.state.nDemand)\r\n                        s2 += parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) {\r\n                        if (s1 == s2) this.state.matrix[i][j] = \"\";\r\n                        else {\r\n                            this.state.flag = 1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            let finalMatrix = [];\r\n            let finalMatrix1 = [];\r\n            let initialMatrix = [];\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row1 = [];\r\n                let row2 = [];\r\n                let row3 = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    row1.push(0);\r\n                    row2.push(0);\r\n                    row3.push(0);\r\n                }\r\n                finalMatrix.push(row1);\r\n                initialMatrix.push(row2);\r\n                finalMatrix1.push(row3);\r\n            }\r\n\r\n            if (this.state.flag == 0) {\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        finalMatrix[i][j] = this.state.matrix[i][j];\r\n                        finalMatrix1[i][j] = parseInt(\"\" + this.state.matrix[i][j], 10);\r\n                    }\r\n                }\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        initialMatrix[i][j] = this.state.matrix[i][j];\r\n                    }\r\n                }\r\n\r\n                resolve(this.colMinima(initialMatrix));\r\n            } else {\r\n                let content = this.state.content;\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">The given cost matrix is unbalanced.</span> <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n                this.props.canProceed(false);\r\n                resolve(null);\r\n            }\r\n        });\r\n    }\r\n    display = (matrix) => {\r\n        let content = this.state.content;\r\n\r\n        let matrixColHeaders = [];\r\n        let matrixRowHeaders = [];\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n        matrixRowHeaders.push(\"Demand\");\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n        matrixColHeaders.push(\"Supply\");\r\n        let matrixToDisplay = (\r\n            <MatrixToTable\r\n                matrix={matrix}\r\n                rowHeaders={matrixRowHeaders}\r\n                colHeaders={matrixColHeaders}\r\n                nCols={this.state.nDemand + 1}\r\n                nRows={this.state.nSupply + 1}\r\n            />\r\n        );\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">{matrixToDisplay}</span> <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    };\r\n\r\n    colMinima(intermediate) {\r\n        let temp,\r\n            ns = this.state.nSupply,\r\n            nd = this.state.nDemand,\r\n            sum = this.state.sum;\r\n        let st = 0;\r\n        if (this.state.flag == 0) {\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row style={{ marginBottom: 20 }}>\r\n                    <span className=\"text\">\r\n                        Initially, we select the least element from the first column and allocate\r\n                        minimum of the corresponding supply or demand for that cell. The minimum\r\n                        value is subtracted from supply as well as demand. If, the corresponding\r\n                        supply and/or demand is exhausted, we discard the corresponding row and/or\r\n                        column. And then we proceed to the next column.\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            for (let i = 0; i < nd; i++) {\r\n                let demand = intermediate[ns][i];\r\n                while (demand != \"--\") {\r\n                    let minima = Number.MAX_SAFE_INTEGER;\r\n                    for (let j = 0; j < ns; j++) {\r\n                        if (\r\n                            !intermediate[j][i].includes(\"(\") &&\r\n                            atoi(\"\" + intermediate[j][i]) < minima &&\r\n                            intermediate[j][nd] != \"--\"\r\n                        ) {\r\n                            minima = atoi(\"\" + intermediate[j][i]);\r\n                            temp = j;\r\n                        }\r\n                    }\r\n                    if (atoi(\"\" + intermediate[ns][i]) < atoi(\"\" + intermediate[temp][nd])) {\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${++st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the smallest cost in the column - ${\r\n                                        i + 1\r\n                                    } which is neither\r\n                                        allocated nor discarded. In our case such cell is available\r\n                                        at (${temp + 1}, ${i + 1}). The corresponding supply is ${\r\n                                        intermediate[temp][this.state.nDemand]\r\n                                    } and demand is ${intermediate[this.state.nSupply][i]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Demand: ${\r\n                                        intermediate[this.state.nSupply][i]\r\n                                    } to the cell (${temp + 1},${i + 1}). We subtract ${\r\n                                        intermediate[this.state.nSupply][i]\r\n                                    } from \r\n                                        the respective supply as well as demand and discard the \r\n                                        unallocated values from the exhausted column. Now if the demand is not exhausted, then we will continue in the same row/column otherwise we will move to the next column.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n                        intermediate[temp][i] =\r\n                            intermediate[ns][i] + \"(\" + intermediate[temp][i] + \")\";\r\n                        if (\r\n                            atoi(\"\" + intermediate[temp][nd]) - atoi(\"\" + intermediate[ns][i]) >\r\n                            0\r\n                        ) {\r\n                            intermediate[temp][nd] =\r\n                                \"\" +\r\n                                (atoi(\"\" + intermediate[temp][nd]) -\r\n                                    atoi(\"\" + intermediate[ns][i]));\r\n                        } else {\r\n                            intermediate[temp][nd] = \"--\";\r\n                        }\r\n                        intermediate[ns][i] = \"--\";\r\n                    } else {\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 5 }}>\r\n                                <span style={{ fontSize: 18 }}>{`Iteration ${++st}`}</span>\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        content.push(\r\n                            <Row style={{ marginBottom: 10 }}>\r\n                                <span className=\"text\">\r\n                                    {`Now, we look for the smallest cost in the Column - ${\r\n                                        i + 1\r\n                                    } which is neither\r\n                                        allocated nor discarded. In our case such cell is available\r\n                                        at (${temp + 1}, ${i + 1}). The corresponding supply is ${\r\n                                        intermediate[temp][this.state.nDemand]\r\n                                    } and demand is ${intermediate[this.state.nSupply][i]}.\r\n                                    Then, we allocate the minimum of the these\r\n                                    (i.e. Supply: ${\r\n                                        intermediate[temp][this.state.nDemand]\r\n                                    } to the cell (${temp + 1},${i + 1}). We subtract ${\r\n                                        intermediate[temp][this.state.nDemand]\r\n                                    } from \r\n                                        the respective supply as well as demand and discard the \r\n                                        unallocated values from the exhausted row. Now if the supply is not exhausted, then we will continue in the same row/column otherwise we will move to the next column.`}\r\n                                </span>{\" \"}\r\n                                <br />\r\n                            </Row>,\r\n                        );\r\n                        this.setState({ content: content });\r\n                        intermediate[temp][i] =\r\n                            intermediate[temp][nd] + \"(\" + intermediate[temp][i] + \")\";\r\n                        if (\r\n                            atoi(\"\" + intermediate[ns][i]) - atoi(\"\" + intermediate[temp][nd]) >\r\n                            0\r\n                        ) {\r\n                            intermediate[ns][i] =\r\n                                \"\" +\r\n                                (atoi(\"\" + intermediate[ns][i]) -\r\n                                    atoi(\"\" + intermediate[temp][nd]));\r\n                        } else {\r\n                            intermediate[ns][i] = \"--\";\r\n                        }\r\n                        intermediate[temp][nd] = \"--\";\r\n                    }\r\n                    demand = intermediate[ns][i];\r\n                    content = this.state.content;\r\n\r\n                    let matrixToDisplay = intermediate.map((arr, i) => {\r\n                        console.log(arr);\r\n                        if (arr != null)\r\n                            return arr.map((element, j) => {\r\n                                if (element != null) {\r\n                                    if ((\"\" + element).includes(\"(\")) {\r\n                                        return {\r\n                                            cost: element,\r\n                                            coveredByLines: 2,\r\n                                        };\r\n                                    } else if (element == \"--\") {\r\n                                        return {\r\n                                            cost: 0,\r\n                                            coveredByLines: 1,\r\n                                        };\r\n                                    } else {\r\n                                        if (\r\n                                            intermediate[i][this.state.nDemand] == \"--\" ||\r\n                                            intermediate[this.state.nSupply][j] == \"--\"\r\n                                        ) {\r\n                                            return {\r\n                                                cost: element,\r\n                                                coveredByLines: 1,\r\n                                            };\r\n                                        } else {\r\n                                            return {\r\n                                                cost: element,\r\n                                                coveredByLines: 0,\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n                            });\r\n                        return null;\r\n                    });\r\n                    let matrixColHeaders = [];\r\n                    let matrixRowHeaders = [];\r\n\r\n                    for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n                    matrixRowHeaders.push(\"Demand\");\r\n\r\n                    for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n                    matrixColHeaders.push(\"Supply\");\r\n                    matrixToDisplay = (\r\n                        <MatrixToTableWithLines\r\n                            matrix={matrixToDisplay}\r\n                            rowHeaders={matrixRowHeaders}\r\n                            colHeaders={matrixColHeaders}\r\n                            nCols={this.state.nDemand + 1}\r\n                            nRows={this.state.nSupply + 1}\r\n                        />\r\n                    );\r\n                    content.push(\r\n                        <Row>\r\n                            <span className=\"text\">{matrixToDisplay}</span> <br />\r\n                        </Row>,\r\n                    );\r\n                    this.setState({ content: content });\r\n                }\r\n            }\r\n            this.totalCost(intermediate);\r\n        }\r\n    }\r\n\r\n    totalCost(finalMatrix) {\r\n        this.props.callbackFunction(finalMatrix);\r\n        let mat;\r\n        let count = 0;\r\n        let nd = this.state.nDemand;\r\n        let ns = this.state.nSupply;\r\n        let content = this.state.content;\r\n\r\n        for (let i = 0; i < ns; i++) {\r\n            for (let j = 0; j < nd; j++) {\r\n                if (\r\n                    finalMatrix[i][j] != \"--\" &&\r\n                    finalMatrix[i][j].indexOf(\"(\") < finalMatrix[i][j].length\r\n                ) {\r\n                    count++;\r\n                    if (i == 0 && j == 0) {\r\n                        mat = finalMatrix[i][j];\r\n                    } else {\r\n                        mat = mat + \" + \" + finalMatrix[i][j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let mat1 = mat.split(\" + \");\r\n        mat = \"\";\r\n        let sum = 0;\r\n        for (let index = 0; index < mat1.length; index++) {\r\n            if (mat1[index].includes(\"(\")) {\r\n                sum +=\r\n                    atoi(mat1[index].split(\"(\")[0]) * atoi(mat1[index].split(\"(\")[1].split(\")\")[0]);\r\n                mat += mat1[index] + \" + \";\r\n            }\r\n        }\r\n        // console.log(mat1);\r\n        mat = mat.substring(0, mat.length - 3);\r\n        console.log(\"\\n\\tThe minimum total transportation cost is : \");\r\n\r\n        console.log(mat, \"=\", sum);\r\n        content = this.state.content;\r\n        content.push(\r\n            <Row style={{ marginBottom: 5 }}>\r\n                <span className=\"text\">{`The minimum total transportation cost is : ${mat} = ${sum}`}</span>{\" \"}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n        if (count == ns + nd - 1) {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }. Since, this value is equal to the number of allocated cells, \r\n                        the solution is non degenerate. Therefore, the solution is optimal and \r\n                        we need not proceed further with any optimal methods.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            this.props.canProceed(false);\r\n        } else {\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span className=\"text\">{`Now, we calculate m + n - 1, which is ${\r\n                        this.state.nSupply\r\n                    } + ${this.state.nDemand} - 1 =  \r\n                        ${\r\n                            this.state.nSupply + this.state.nDemand - 1\r\n                        }.\\n Since, this value is not equal to the number of allocated cells, \r\n                        the solution is degenerate and not yet optimal.\r\n                        Hence, we need to proceed further in order to get the optimal solution.`}</span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\n\r\nconst atoi = (string) => parseInt(string, 10);\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nimport { Card } from \"@material-ui/core\";\r\nexport default class ModiMethod extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: this.props.matrix,\r\n            nSupply: this.props.nRows,\r\n            nDemand: this.props.nCols,\r\n            outputMatrix: this.props.feasibleMatrix,\r\n            content: [],\r\n            loop: [],\r\n            sum: 0,\r\n        };\r\n\r\n        this.lastElement();\r\n    }\r\n\r\n    lastElement() {\r\n        let count = 1;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n            let givenMatrix = [];\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                    else {\r\n                        if (this.state.outputMatrix[i][j] == \"--\") {\r\n                            this.state.outputMatrix[i][j] = 0;\r\n                        }\r\n                        row.push(this.state.outputMatrix[i][j]);\r\n                    }\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span style={{ fontSize: 18 }}>{`Step ${count}`}</span>\r\n                    <br />\r\n                    <span className=\"text\">Feasible solution matrix is -</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                    <span className=\"text\">\r\n                        We have the feasible solution matrix which has to optimized. Initially, We\r\n                        will assign dual variables(U and V) for all the allocated cells.\r\n                    </span>\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            let flag = false;\r\n\r\n            while (flag == false) {\r\n                count++;\r\n                let u = [],\r\n                    v = [];\r\n                let penalty = [];\r\n                for (let i = 0; i < this.state.nSupply; i++)\r\n                    penalty.push(Array(this.state.nDemand).fill(0));\r\n                for (let i = 0; i < this.state.nSupply; i++) u.push(Number.MAX_VALUE);\r\n\r\n                for (let i = 0; i < this.state.nDemand; i++) v.push(Number.MAX_VALUE);\r\n                u[0] = 0;\r\n\r\n                let c = this.calc_u_v(u, v);\r\n                for (let i = 0; i < this.state.nSupply; i++)\r\n                    if ((u[i] = Number.MAX_VALUE)) c = this.calc_u_v(u, v);\r\n\r\n                for (let i = 0; i < this.state.nDemand; i++)\r\n                    if ((v[i] = Number.MAX_VALUE)) c = this.calc_u_v(u, v);\r\n                u = c[0];\r\n                v = c[1];\r\n                this.disequations(u, v);\r\n                content.push(\r\n                    <Row>\r\n                        <br />\r\n                        <span text>Calculate penalties & find new basic</span>\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n\r\n                flag = this.cal_penalty(penalty, u, v);\r\n\r\n                if (flag == false) {\r\n                    console.log(\"Step\", count, \": Optimize the Allotments :\\n\");\r\n                    this.optimize();\r\n                    console.log(\"The new table after allocation is:\");\r\n\r\n                    let matrixColHeaders = [];\r\n                    let matrixRowHeaders = [];\r\n                    for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n                    matrixRowHeaders.push(\"Demand\");\r\n\r\n                    for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n                    matrixColHeaders.push(\"Supply\");\r\n                    let givenMatrix = [];\r\n                    for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                        let row = [];\r\n                        for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                            if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                            else row.push(this.state.outputMatrix[i][j]);\r\n                        }\r\n                        givenMatrix.push(row);\r\n                    }\r\n                    givenMatrix = (\r\n                        <MatrixToTable\r\n                            matrix={givenMatrix}\r\n                            rowHeaders={matrixRowHeaders}\r\n                            colHeaders={matrixColHeaders}\r\n                            nCols={this.state.nDemand + 1}\r\n                            nRows={this.state.nSupply + 1}\r\n                        />\r\n                    );\r\n                    let content = this.state.content;\r\n\r\n                    content.push(\r\n                        <Row>\r\n                            <br />\r\n                            <span className=\"text\">\r\n                                Matrix after assigment of new values is -\r\n                            </span>{\" \"}\r\n                            <br />\r\n                            {givenMatrix}\r\n                            <br />\r\n                        </Row>,\r\n                    );\r\n                    this.setState({ content: content });\r\n                }\r\n            }\r\n\r\n            resolve(this.totalcost(count));\r\n        });\r\n    }\r\n    calc_u_v(u, v) {\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") != -1) {\r\n                    if (u[i] != Number.MAX_VALUE) {\r\n                        v[j] = this.state.matrix[i][j] - u[i];\r\n                    } else if (v[j] != Number.MAX_VALUE) {\r\n                        u[i] = this.state.matrix[i][j] - v[j];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [u, v];\r\n    }\r\n    disequations(u, v) {\r\n        let content = this.state.content;\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">\r\n                    <br />\r\n                    The equations to solve for the values of U and V are:\r\n                </span>{\" \"}\r\n            </Row>,\r\n        );\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++)\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") != -1) {\r\n                    let matrixColHeaders = [];\r\n                    let matrixRowHeaders = [];\r\n                    for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n                    matrixRowHeaders.push(\"Demand\");\r\n\r\n                    for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n                    matrixColHeaders.push(\"Supply\");\r\n                    let givenMatrix = [];\r\n                    for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                        let row = [];\r\n                        for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                            if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                            else row.push(this.state.outputMatrix[i][j]);\r\n                        }\r\n                        givenMatrix.push(row);\r\n                    }\r\n                    givenMatrix = (\r\n                        <MatrixToTable\r\n                            matrix={givenMatrix}\r\n                            rowHeaders={matrixRowHeaders}\r\n                            colHeaders={matrixColHeaders}\r\n                            nCols={this.state.nDemand + 1}\r\n                            nRows={this.state.nSupply + 1}\r\n                        />\r\n                    );\r\n\r\n                    content.push(\r\n                        <Row>\r\n                            <span className=\"text\">\r\n                                U[{i + 1}] + V[{j + 1}] = {this.state.matrix[i][j]}\r\n                            </span>{\" \"}\r\n                            <br />\r\n                        </Row>,\r\n                    );\r\n                }\r\n            }\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">\r\n                    Solving the equations of U & V gives us the following values:\r\n                </span>\r\n            </Row>,\r\n        );\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++)\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        U[{i + 1}] = {u[i]}\r\n                    </span>\r\n                </Row>,\r\n            );\r\n        for (let i = 0; i < this.state.nDemand; i++)\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        V[{i + 1}] = {v[i]}\r\n                    </span>\r\n                </Row>,\r\n            );\r\n\r\n        this.setState({ content: content });\r\n    }\r\n    cal_penalty(pen, u, v) {\r\n        let minpen = 99999;\r\n        let minx = 0;\r\n        let miny = 0;\r\n        let dummy = [];\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") == -1) {\r\n                    pen[i][j] = atoi(this.state.matrix[i][j]) - (u[i] + v[j]);\r\n                    if (minpen > pen[i][j]) {\r\n                        minpen = pen[i][j];\r\n                        minx = i;\r\n                        miny = j;\r\n                        dummy = [];\r\n                        dummy.push(i);\r\n                        dummy.push(j);\r\n                    }\r\n                } else {\r\n                    pen[i][j] = -99999;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if (pen[i][j] != -99999) {\r\n                    let content = this.state.content;\r\n                    content.push(\r\n                        <Row>\r\n                            <span className=\"text\">\r\n                                Penalty[{i + 1}][{j + 1}] = {this.state.matrix[i][j]} - ({u[i]} +\r\n                                {v[j]}) = {pen[i][j]}\r\n                            </span>{\" \"}\r\n                            <br />\r\n                        </Row>,\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (minpen >= 0) {\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        The solution is optimized and as there is no negative penalty, therefore the\r\n                        final matrix is:\r\n                        <br />\r\n                    </span>{\" \"}\r\n                </Row>,\r\n            );\r\n\r\n            return true;\r\n        } else {\r\n            let content = this.state.content;\r\n            this.state.loop = [];\r\n            this.state.loop.push(dummy);\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        Most negative element is {minpen} found at index ({dummy[0] + 1},\r\n                        {dummy[1] + 1})\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            if (this.up(minx - 1, miny, \"up\")) {\r\n            } else if (this.down(minx + 1, miny, \"down\")) {\r\n            } else if (this.right(minx, miny + 1, \"right\")) {\r\n            } else if (this.left(minx + 1, miny - 1, \"left\")) {\r\n            } else {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">No loop found</span>{\" \"}\r\n                    </Row>,\r\n                );\r\n            }\r\n            let dispVar = this.state.outputMatrix;\r\n            dispVar[this.state.loop[0][0]][this.state.loop[0][1]] += \"[\" + minpen + \"]\";\r\n            for (var i = 1; i < this.state.loop.length; i++) {\r\n                if (i % 2 == 0) {\r\n                    dispVar[this.state.loop[i][0]][this.state.loop[i][1]] += \"(+)\";\r\n                } else dispVar[this.state.loop[i][0]][this.state.loop[i][1]] += \"(-)\";\r\n            }\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++) matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++) matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n            let givenMatrix = [];\r\n\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand) row.push(\"\");\r\n                    else row.push(dispVar[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n\r\n            content.push(\r\n                <Row>\r\n                    <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n        }\r\n        return false;\r\n    }\r\n\r\n    left(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = j; k >= 0; k--) {\r\n            if ((\"\" + this.state.outputMatrix[i][k]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (this.state.loop[i][0] == i && this.state.loop[i][1] == k) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(i);\r\n                dummy.push(k);\r\n                this.state.loop.push(dummy);\r\n                if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] >= k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (this.up(i - 1, k, direct) || this.down(i + 1, k, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    right(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = j; k < this.state.nDemand; k++) {\r\n            if ((\"\" + this.state.outputMatrix[i][k]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (this.state.loop[i][0] == i && this.state.loop[i][1] == k) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(i);\r\n                dummy.push(k);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] >= k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == i && this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i && this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i && this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (this.up(i - 1, k, direct) || this.down(i + 1, k, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    up(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = i; k >= 0; k--) {\r\n            if ((\"\" + this.state.outputMatrix[k][j]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (this.state.loop[i][0] == k && this.state.loop[i][1] == j) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(k);\r\n                dummy.push(j);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k && this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k && this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] >= j) ||\r\n                        (this.state.loop[0][0] >= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] >= j) ||\r\n                        (this.state.loop[0][0] < k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (this.right(k, j + 1, direct) || this.left(k, j - 1, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    down(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = i; k < this.state.nSupply; k++) {\r\n            if ((\"\" + this.state.outputMatrix[k][j]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (this.state.loop[i][0] == k && this.state.loop[i][1] == j) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(k);\r\n                dummy.push(j);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k && this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k && this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] > j) ||\r\n                        (this.state.loop[0][0] <= k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k && this.state.loop[0][1] > j) ||\r\n                        (this.state.loop[0][0] > k && this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                if (this.left(k, j - 1, direct) || this.right(k, j + 1, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    opt_allocate(x, y, ch, minalloc) {\r\n        let content = this.state.content;\r\n        if ((\"\" + this.state.outputMatrix[x][y]).indexOf(\"(\") == -1) {\r\n            this.state.outputMatrix[x][y] = this.state.matrix[x][y] + \"(\" + minalloc + \")\";\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        New value of vec {x} {y} is {this.state.outputMatrix[x][y]}\r\n                    </span>{\" \"}\r\n                </Row>,\r\n            );\r\n\r\n            console.log(\"New value of vec \", x, \" \", y, \" is \", this.state.outputMatrix[x][y]);\r\n        } else {\r\n            if (ch == \"+\") {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            Old value of vec(+) {x} {y} is {this.state.outputMatrix[x][y]}\r\n                        </span>{\" \"}\r\n                    </Row>,\r\n                );\r\n                console.log(\r\n                    \"Old value of vec(+) \",\r\n                    x,\r\n                    \" \",\r\n                    y,\r\n                    \" is \",\r\n                    this.state.outputMatrix[x][y],\r\n                );\r\n                let val = atoi(\r\n                    this.state.outputMatrix[x][y].substr(\r\n                        (\"\" + this.state.outputMatrix[x][y]).indexOf(\"(\") + 1,\r\n                        (\"\" + this.state.outputMatrix[x][y]).indexOf(\")\") + 1,\r\n                    ),\r\n                );\r\n                val = val + minalloc;\r\n                this.state.outputMatrix[x][y] = this.state.matrix[x][y] + \"(\" + val + \")\";\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            New value of vec(+) {x} {y} is {this.state.outputMatrix[x][y]}\r\n                        </span>{\" \"}\r\n                    </Row>,\r\n                );\r\n                console.log(\r\n                    \"New value of vec(+) \",\r\n                    x,\r\n                    \" \",\r\n                    y,\r\n                    \" is \",\r\n                    this.state.outputMatrix[x][y],\r\n                );\r\n            } else {\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            Old value of vec(-) {x} {y} is {this.state.outputMatrix[x][y]}\r\n                        </span>{\" \"}\r\n                    </Row>,\r\n                );\r\n                console.log(\r\n                    \"Old value of vec(-) \",\r\n                    x,\r\n                    \" \",\r\n                    y,\r\n                    \" is \",\r\n                    this.state.outputMatrix[x][y],\r\n                );\r\n                let val = atoi(\r\n                    this.state.outputMatrix[x][y].substr(\r\n                        (\"\" + this.state.outputMatrix[x][y]).indexOf(\"(\") + 1,\r\n                        (\"\" + this.state.outputMatrix[x][y]).indexOf(\")\") + 1,\r\n                    ),\r\n                );\r\n                val = val - minalloc;\r\n                if (val == 0) this.state.outputMatrix[x][y] = this.state.matrix[x][y];\r\n                else this.state.outputMatrix[x][y] = this.state.matrix[x][y] + \"(\" + val + \")\";\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            New value of vec(-) {x} {y} is {this.state.outputMatrix[x][y]}\r\n                        </span>{\" \"}\r\n                    </Row>,\r\n                );\r\n                console.log(\r\n                    \"New value of vec(-) \",\r\n                    x,\r\n                    \" \",\r\n                    y,\r\n                    \" is \",\r\n                    this.state.outputMatrix[x][y],\r\n                );\r\n            }\r\n        }\r\n        this.setState({ content: content });\r\n    }\r\n\r\n    optimize() {\r\n        let minalloc = 99999;\r\n        let val_st = \"\";\r\n        let subs = \"\";\r\n        let value = 0;\r\n        for (let i = 0; i < this.state.loop.length; i++) {\r\n            if (i % 2 != 0) {\r\n                val_st = this.state.outputMatrix[this.state.loop[i][0]][this.state.loop[i][1]];\r\n                subs = val_st.substr(\r\n                    (\"\" + val_st).indexOf(\"(\") + 1,\r\n                    (\"\" + val_st).indexOf(\")\") + 1,\r\n                );\r\n                value = atoi(subs);\r\n                if (minalloc > value) minalloc = value;\r\n            }\r\n        }\r\n\r\n        let x = 0,\r\n            y = 0;\r\n        for (let i = 0; i < this.state.loop.length; i++) {\r\n            if (i % 2 == 0) {\r\n                x = this.state.loop[i][0];\r\n                y = this.state.loop[i][1];\r\n                this.opt_allocate(x, y, \"+\", minalloc);\r\n            } else {\r\n                x = this.state.loop[i][0];\r\n                y = this.state.loop[i][1];\r\n                this.opt_allocate(x, y, \"-\", minalloc);\r\n            }\r\n        }\r\n    }\r\n    totalcost(count) {\r\n        let content = this.state.content;\r\n\r\n        let ans = \"The minimum total transportation cost after optimization is = \";\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") != -1) {\r\n                    ans += this.state.outputMatrix[i][j] + \" + \";\r\n                    let cost = atoi(\r\n                        this.state.outputMatrix[i][j].substr(\r\n                            0,\r\n                            (\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\"),\r\n                        ),\r\n                    );\r\n                    let alloc = atoi(\r\n                        this.state.outputMatrix[i][j].substr(\r\n                            (\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") + 1,\r\n                            (\"\" + this.state.outputMatrix[i][j]).indexOf(\")\") + 1,\r\n                        ),\r\n                    );\r\n                    this.state.sum += cost * alloc;\r\n                }\r\n            }\r\n        }\r\n        ans = ans.substr(0, ans.length - 2);\r\n        console.log(ans, \"=\", this.state.sum);\r\n        content.push(\r\n            <Row style={{ marginBottom: 20 }}>\r\n                <span className=\"text\">\r\n                    <br />\r\n                    <br />\r\n                    {ans} = {this.state.sum}\r\n                </span>{\" \"}\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    }\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\nconst atoi = (string) => parseInt(string, 10);\r\n","import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\nimport MatrixToTable from \"components/Table/MatrixToTable\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nimport { Card } from \"@material-ui/core\";\r\nexport default class SteppingStone extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            matrix: this.props.matrix,\r\n            nSupply: this.props.nRows,\r\n            nDemand: this.props.nCols,\r\n            outputMatrix: this.props.feasibleMatrix,\r\n            content: [],\r\n            finalloop: [],\r\n            loop: [],\r\n            sum: 0,\r\n        };\r\n\r\n        this.lastElement();\r\n    }\r\n\r\n    lastElement() {\r\n        let count = 0;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++)\r\n                matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++)\r\n                matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n            let givenMatrix = [];\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand)\r\n                        row.push(\"\");\r\n                    else row.push(this.state.outputMatrix[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">Given output matrix is:</span> <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                </Row>\r\n            );\r\n            this.setState({ content: content });\r\n            let flag = false;\r\n\r\n            while (flag == false) {\r\n                flag = this.calc_opcost();\r\n\r\n                let matrixColHeaders = [];\r\n                let matrixRowHeaders = [];\r\n                for (let i = 0; i < this.state.nSupply; i++)\r\n                    matrixRowHeaders.push(\"\");\r\n                matrixRowHeaders.push(\"Demand\");\r\n\r\n                for (let i = 0; i < this.state.nDemand; i++)\r\n                    matrixColHeaders.push(\"\");\r\n                matrixColHeaders.push(\"Supply\");\r\n                let givenMatrix = [];\r\n                for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                    let row = [];\r\n                    for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                        if (i == this.state.nSupply && j == this.state.nDemand)\r\n                            row.push(\"\");\r\n                        else row.push(this.state.outputMatrix[i][j]);\r\n                    }\r\n                    givenMatrix.push(row);\r\n                }\r\n                givenMatrix = (\r\n                    <MatrixToTable\r\n                        matrix={givenMatrix}\r\n                        rowHeaders={matrixRowHeaders}\r\n                        colHeaders={matrixColHeaders}\r\n                        nCols={this.state.nDemand + 1}\r\n                        nRows={this.state.nSupply + 1}\r\n                    />\r\n                );\r\n                let content = this.state.content;\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <br />\r\n                        {givenMatrix}\r\n                        <br />\r\n                    </Row>\r\n                );\r\n                this.setState({ content: content });\r\n            }\r\n\r\n            resolve(this.totalcost(count));\r\n        });\r\n    }\r\n\r\n    left(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = j; k >= 0; k--) {\r\n            if ((\"\" + this.state.outputMatrix[i][k]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (\r\n                        this.state.loop[i][0] == i &&\r\n                        this.state.loop[i][1] == k\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(i);\r\n                dummy.push(k);\r\n                this.state.loop.push(dummy);\r\n                if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] >= k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (this.up(i - 1, k, direct) || this.down(i + 1, k, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    right(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = j; k < this.state.nDemand; k++) {\r\n            if ((\"\" + this.state.outputMatrix[i][k]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (\r\n                        this.state.loop[i][0] == i &&\r\n                        this.state.loop[i][1] == k\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(i);\r\n                dummy.push(k);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] < k) ||\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] >= k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == i &&\r\n                            this.state.loop[0][1] > k) ||\r\n                        (this.state.loop[0][0] <= i &&\r\n                            this.state.loop[0][1] == k) ||\r\n                        (this.state.loop[0][0] >= i &&\r\n                            this.state.loop[0][1] == k)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (this.up(i - 1, k, direct) || this.down(i + 1, k, direct)) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    up(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = i; k >= 0; k--) {\r\n            if ((\"\" + this.state.outputMatrix[k][j]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (\r\n                        this.state.loop[i][0] == k &&\r\n                        this.state.loop[i][1] == j\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(k);\r\n                dummy.push(j);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k &&\r\n                            this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k &&\r\n                            this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"down\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] >= j) ||\r\n                        (this.state.loop[0][0] >= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] >= j) ||\r\n                        (this.state.loop[0][0] < k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                if (\r\n                    this.right(k, j + 1, direct) ||\r\n                    this.left(k, j - 1, direct)\r\n                ) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    down(i, j, direct) {\r\n        let dummy = [];\r\n        for (let k = i; k < this.state.nSupply; k++) {\r\n            if ((\"\" + this.state.outputMatrix[k][j]).indexOf(\"(\") != -1) {\r\n                for (let i = 0; i < this.state.loop.length; i++) {\r\n                    if (\r\n                        this.state.loop[i][0] == k &&\r\n                        this.state.loop[i][1] == j\r\n                    ) {\r\n                        return false;\r\n                    }\r\n                }\r\n                dummy = [];\r\n                dummy.push(k);\r\n                dummy.push(j);\r\n                this.state.loop.push(dummy);\r\n\r\n                if (direct == \"left\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k &&\r\n                            this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"right\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] <= k &&\r\n                            this.state.loop[0][1] == j) ||\r\n                        (this.state.loop[0][0] >= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else if (direct == \"up\") {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] > j) ||\r\n                        (this.state.loop[0][0] <= k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] < j) ||\r\n                        (this.state.loop[0][0] == k &&\r\n                            this.state.loop[0][1] > j) ||\r\n                        (this.state.loop[0][0] > k &&\r\n                            this.state.loop[0][1] == j)\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                if (\r\n                    this.left(k, j - 1, direct) ||\r\n                    this.right(k, j + 1, direct)\r\n                ) {\r\n                    return true;\r\n                } else {\r\n                    this.state.loop.pop();\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    calc_opcost() {\r\n        let dummy = [];\r\n        let cost = 0;\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") == -1) {\r\n                    dummy = [];\r\n                    dummy.push(i);\r\n                    dummy.push(j);\r\n                    this.state.loop = [];\r\n                    this.state.loop.push(dummy);\r\n                    cost = this.getloop(cost, i, j);\r\n                }\r\n            }\r\n        }\r\n        if (cost < 0) {\r\n            let content = this.state.content;\r\n            let dispVar = this.state.outputMatrix;\r\n            this.state.loop = this.state.finalloop;\r\n            dispVar[this.state.loop[0][0]][this.state.loop[0][1]] +=\r\n                \"[\" + cost + \"]\";\r\n            for (var i = 1; i < this.state.loop.length; i++) {\r\n                if (i % 2 == 0) {\r\n                    dispVar[this.state.loop[i][0]][this.state.loop[i][1]] +=\r\n                        \"(+)\";\r\n                } else\r\n                    dispVar[this.state.loop[i][0]][this.state.loop[i][1]] +=\r\n                        \"(-)\";\r\n            }\r\n\r\n            // console.log(dispVar, \"----\");\r\n            let matrixColHeaders = [];\r\n            let matrixRowHeaders = [];\r\n            for (let i = 0; i < this.state.nSupply; i++)\r\n                matrixRowHeaders.push(\"\");\r\n            matrixRowHeaders.push(\"Demand\");\r\n\r\n            for (let i = 0; i < this.state.nDemand; i++)\r\n                matrixColHeaders.push(\"\");\r\n            matrixColHeaders.push(\"Supply\");\r\n            let givenMatrix = [];\r\n            for (let i = 0; i < this.state.nSupply + 1; i++) {\r\n                let row = [];\r\n                for (let j = 0; j < this.state.nDemand + 1; j++) {\r\n                    if (i == this.state.nSupply && j == this.state.nDemand)\r\n                        row.push(\"\");\r\n                    else row.push(dispVar[i][j]);\r\n                }\r\n                givenMatrix.push(row);\r\n            }\r\n            givenMatrix = (\r\n                <MatrixToTable\r\n                    matrix={givenMatrix}\r\n                    rowHeaders={matrixRowHeaders}\r\n                    colHeaders={matrixColHeaders}\r\n                    nCols={this.state.nDemand + 1}\r\n                    nRows={this.state.nSupply + 1}\r\n                />\r\n            );\r\n\r\n            content.push(\r\n                <Row>\r\n                    {\" \"}\r\n                    <span className=\"text\">\r\n                        The solution is not optimal. So we need to find the most\r\n                        negative element.\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    <br />\r\n                    The cell with most negative value is {cost} at (\r\n                    {this.state.finalloop[0][0] + 1},\r\n                    {this.state.finalloop[0][1] + 1})\r\n                    <br />\r\n                    <br />\r\n                    {givenMatrix}\r\n                    <br />\r\n                    <br />\r\n                    Calculation of new allocations :\r\n                    <br />\r\n                </Row>\r\n            );\r\n\r\n            this.setState({ content: content });\r\n\r\n            this.optimize();\r\n            return false;\r\n        } else {\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        The solution is optimized as there is no negative sum\r\n                        for any loop in the matrix. Therefore the final matrix\r\n                        is:\r\n                    </span>{\" \"}\r\n                    <br />\r\n                    <br />\r\n                </Row>\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    getloop(cost, minx, miny) {\r\n        let flag = 0;\r\n        let sum = 0;\r\n\r\n        if (this.up(minx - 1, miny, \"up\")) {\r\n        } else if (this.down(minx + 1, miny, \"down\")) {\r\n        } else if (this.right(minx, miny + 1, \"right\")) {\r\n        } else if (this.left(minx + 1, miny - 1, \"left\")) {\r\n        } else {\r\n            flag = 1;\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">No Loop:</span> <br />\r\n                    <br />\r\n                </Row>\r\n            );\r\n            this.setState({ content: content });\r\n        }\r\n\r\n        //console.log(\"loop is: \",this.state.loop);\r\n        if (flag == 0) {\r\n            for (let i = 0; i < this.state.loop.length; i++) {\r\n                if (i % 2 == 0) {\r\n                    sum += atoi(\r\n                        this.state.matrix[this.state.loop[i][0]][\r\n                            this.state.loop[i][1]\r\n                        ]\r\n                    );\r\n                } else {\r\n                    sum -= atoi(\r\n                        this.state.matrix[this.state.loop[i][0]][\r\n                            this.state.loop[i][1]\r\n                        ]\r\n                    );\r\n                }\r\n            }\r\n\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        {\" \"}\r\n                        Route for{\" \"}\r\n                        {\r\n                            this.state.matrix[this.state.loop[0][0]][\r\n                                this.state.loop[0][1]\r\n                            ]\r\n                        }{\" \"}\r\n                        at cell ({this.state.loop[0][0] + 1},\r\n                        {this.state.loop[0][1] + 1}) is:\r\n                    </span>\r\n                </Row>\r\n            );\r\n            for (let i = 0; i < this.state.loop.length - 1; i++) {\r\n                content.push(\r\n                    <span>\r\n                        [{this.state.loop[i][0] + 1},{this.state.loop[i][1] + 1}\r\n                        ]{\"--->\"}\r\n                    </span>\r\n                );\r\n            }\r\n            content.push(\r\n                <span className=\"text\">\r\n                    [{this.state.loop[this.state.loop.length - 1][0] + 1},\r\n                    {this.state.loop[this.state.loop.length - 1][1] + 1}]\r\n                </span>\r\n            );\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">Cost of Route is : {sum}</span>\r\n                    <br />\r\n                    <br />\r\n                </Row>\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            if (sum < cost) {\r\n                cost = sum;\r\n                this.state.finalloop = this.state.loop;\r\n            }\r\n        }\r\n        return cost;\r\n    }\r\n\r\n    opt_allocate(x, y, ch, minalloc) {\r\n        if (this.state.outputMatrix[x][y].indexOf(\"(\") == -1) {\r\n            this.state.outputMatrix[x][y] =\r\n                this.state.matrix[x][y] + \"(\" + minalloc + \")\";\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        {\" \"}\r\n                        New value of vec {x},{y}\r\n                        is\r\n                        {this.state.outputMatrix[x][y]}{\" \"}\r\n                    </span>{\" \"}\r\n                    <br />\r\n                </Row>\r\n            );\r\n            this.setState({ content: content });\r\n        } else {\r\n            if (ch == \"+\") {\r\n                let content = this.state.content;\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {\" \"}\r\n                            Old value of vec(+) {x},{y}\r\n                            is\r\n                            {this.state.outputMatrix[x][y]}{\" \"}\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>\r\n                );\r\n\r\n                let val = atoi(\r\n                    this.state.outputMatrix[x][y].substr(\r\n                        this.state.outputMatrix[x][y].indexOf(\"(\") + 1,\r\n                        this.state.outputMatrix[x][y].indexOf(\")\") + 1\r\n                    )\r\n                );\r\n                val = val + minalloc;\r\n                this.state.outputMatrix[x][y] =\r\n                    this.state.matrix[x][y] + \"(\" + val + \")\";\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {\" \"}\r\n                            New value of vec(+) {x},{y}\r\n                            is\r\n                            {this.state.outputMatrix[x][y]}{\" \"}\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>\r\n                );\r\n                this.setState({ content: content });\r\n            } else {\r\n                let content = this.state.content;\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {\" \"}\r\n                            Old value of vec(-) {x},{y}\r\n                            is\r\n                            {this.state.outputMatrix[x][y]}{\" \"}\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>\r\n                );\r\n                this.setState({ content: content });\r\n\r\n                let val = atoi(\r\n                    this.state.outputMatrix[x][y].substr(\r\n                        this.state.outputMatrix[x][y].indexOf(\"(\") + 1,\r\n                        this.state.outputMatrix[x][y].indexOf(\")\") + 1\r\n                    )\r\n                );\r\n                val = val - minalloc;\r\n                if (val == 0)\r\n                    this.state.outputMatrix[x][y] = this.state.matrix[x][y];\r\n                else\r\n                    this.state.outputMatrix[x][y] =\r\n                        this.state.matrix[x][y] + \"(\" + val + \")\";\r\n\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {\" \"}\r\n                            New value of vec(-) {x},{y}\r\n                            is\r\n                            {this.state.outputMatrix[x][y]}{\" \"}\r\n                        </span>{\" \"}\r\n                        <br />\r\n                    </Row>\r\n                );\r\n\r\n                this.setState({ content: content });\r\n            }\r\n        }\r\n    }\r\n\r\n    optimize() {\r\n        let minalloc = 99999;\r\n        let val_st = \"\";\r\n        let subs = \"\";\r\n        let value = 0;\r\n        for (let i = 0; i < this.state.finalloop.length; i++) {\r\n            if (i % 2 != 0) {\r\n                val_st = this.state.outputMatrix[this.state.finalloop[i][0]][\r\n                    this.state.finalloop[i][1]\r\n                ];\r\n                subs = val_st.substr(\r\n                    val_st.indexOf(\"(\") + 1,\r\n                    val_st.indexOf(\")\") + 1\r\n                );\r\n                value = atoi(subs);\r\n                if (minalloc > value) minalloc = value;\r\n            }\r\n        }\r\n\r\n        let x = 0,\r\n            y = 0;\r\n        for (let i = 0; i < this.state.finalloop.length; i++) {\r\n            if (i % 2 == 0) {\r\n                x = this.state.finalloop[i][0];\r\n                y = this.state.finalloop[i][1];\r\n                this.opt_allocate(x, y, \"+\", minalloc);\r\n            } else {\r\n                x = this.state.finalloop[i][0];\r\n                y = this.state.finalloop[i][1];\r\n                this.opt_allocate(x, y, \"-\", minalloc);\r\n            }\r\n        }\r\n        let content = this.state.content;\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">\r\n                    <br /> <br />\r\n                    The new table after allocation is:\r\n                    <br />\r\n                </span>{\" \"}\r\n                <br />\r\n            </Row>\r\n        );\r\n\r\n        this.setState({ content: content });\r\n    }\r\n\r\n    totalcost() {\r\n        let ans =\r\n            \" The Minimum total transportation cost after optimization is = \";\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                if ((\"\" + this.state.outputMatrix[i][j]).indexOf(\"(\") != -1) {\r\n                    ans += this.state.outputMatrix[i][j] + \" + \";\r\n                    let cost = atoi(\r\n                        this.state.outputMatrix[i][j].substr(\r\n                            0,\r\n                            this.state.outputMatrix[i][j].indexOf(\"(\")\r\n                        )\r\n                    );\r\n                    let alloc = atoi(\r\n                        this.state.outputMatrix[i][j].substr(\r\n                            this.state.outputMatrix[i][j].indexOf(\"(\") + 1,\r\n                            this.state.outputMatrix[i][j].indexOf(\")\") + 1\r\n                        )\r\n                    );\r\n                    this.state.sum += cost * alloc;\r\n                }\r\n            }\r\n        }\r\n        ans = ans.substr(0, ans.length - 2);\r\n\r\n        let content = this.state.content;\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">\r\n                    {ans} = {this.state.sum}\r\n                </span>{\" \"}\r\n                <br />\r\n                <br />\r\n            </Row>\r\n        );\r\n        this.setState({ content: content });\r\n    }\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\nconst atoi = (string) => parseInt(string, 10);\r\n","import React from \"react\";\r\nimport MatrixToTableWithLines from \"components/Table/MatrixToTableWithLines\";\r\nimport { Row } from \"reactstrap\";\r\n\r\nexport default class VogelsApproximationMethod extends React.Component {\r\n    balanced = 0;\r\n    constructor(props) {\r\n        super(props);\r\n        // this.props = props;\r\n        this.state = {\r\n            matrix: this.props.matrix,\r\n            nSupply: this.props.nRows,\r\n            nDemand: this.props.nCols,\r\n            supply: [],\r\n            demand: [],\r\n            content: [],\r\n            flag: 0,\r\n            sum: 0,\r\n        };\r\n\r\n        for (let i = 0; i < this.state.nSupply; i++) this.state.supply.push(this.props.supply[i]);\r\n\r\n        for (let i = 0; i < this.state.nDemand; i++) this.state.demand.push(this.props.demand[i]);\r\n\r\n        let initialMatrix = [[]];\r\n        for (let i = 0; i < this.state.nDemand + 2; i++) {\r\n            initialMatrix[0].push(\"\");\r\n        }\r\n        initialMatrix[0].push(\"Row Penalty\");\r\n        for (let i = 0; i < this.state.nSupply; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.state.nDemand; j++) {\r\n                row.push(\"\" + this.state.matrix[i][j]);\r\n            }\r\n            initialMatrix.push([\"\", ...row, this.state.supply[i], \"---\"]);\r\n        }\r\n        initialMatrix.push([\"\", ...this.state.demand, \"\", \"\"]);\r\n        let row = [];\r\n        for (let i = 0; i < this.state.nDemand; i++) {\r\n            row.push(\"---\");\r\n        }\r\n        initialMatrix.push([\"Column Penalty\", ...row, \"\", \"\"]);\r\n\r\n        this.m = this.state.nSupply + 3;\r\n        this.n = this.state.nDemand + 3;\r\n\r\n        let content = this.state.content;\r\n        content.push(\r\n            <Row style={{ marginBottom: 5 }}>\r\n                <span className=\"text\">The given cost matrix is</span>\r\n                <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n\r\n        this.display(initialMatrix, this.m - 1, this.n - 1);\r\n        this.isBalanced(initialMatrix, this.m, this.n);\r\n    }\r\n\r\n    display(matrix, m, n) {\r\n        let matrixRowHeaders = [];\r\n        for (let i = 1; i < n; i++) matrixRowHeaders.push(matrix[0][i]);\r\n        matrixRowHeaders[this.state.nDemand] = \"Supply\";\r\n\r\n        let matrixColHeaders = [];\r\n        for (let i = 1; i < m; i++) matrixColHeaders.push(matrix[i][0]);\r\n        matrixColHeaders[this.state.nSupply] = \"Demand\";\r\n\r\n        let matrixToDisplay = [];\r\n        console.log(matrix);\r\n        for (let i = 1; i < m; i++) {\r\n            let row = [];\r\n            for (let j = 1; j < n; j++) {\r\n                if (i === m - 1 || j === n - 1) {\r\n                    if (matrix[i][j] === \"--\") row.push({ cost: \"\", coveredByLines: 1 });\r\n                    else row.push({ cost: matrix[i][j], coveredByLines: 0 });\r\n                } else if (i === m - 2 || j === n - 2) {\r\n                    if (matrix[i][j] === \"--\") row.push({ cost: \"0\", coveredByLines: 1 });\r\n                    else row.push({ cost: matrix[i][j], coveredByLines: 0 });\r\n                } else if (matrix[i][j] === \"--\") {\r\n                    row.push({ cost: this.state.matrix[i - 1][j - 1], coveredByLines: 1 });\r\n                } else if (matrix[i][j].indexOf(\"(\") !== -1) {\r\n                    row.push({ cost: matrix[i][j], coveredByLines: 2 });\r\n                } else row.push({ cost: matrix[i][j], coveredByLines: 0 });\r\n            }\r\n            matrixToDisplay.push(row);\r\n        }\r\n\r\n        matrixToDisplay = (\r\n            <MatrixToTableWithLines\r\n                matrix={matrixToDisplay}\r\n                rowHeaders={matrixColHeaders}\r\n                colHeaders={matrixRowHeaders}\r\n                nRows={m - 1}\r\n                nCols={n - 1}\r\n            />\r\n        );\r\n        let content = this.state.content;\r\n\r\n        content.push(\r\n            <Row>\r\n                <span className=\"text\">{matrixToDisplay}</span> <br />\r\n            </Row>,\r\n        );\r\n        this.setState({ content: content });\r\n    }\r\n\r\n    isBalanced(initialMatrix) {\r\n        let sumSupply = 0,\r\n            sumDemand = 0;\r\n        for (let i = 0; i < this.state.nSupply; i++) sumSupply += this.state.supply[i];\r\n        for (let i = 0; i < this.state.nDemand; i++) sumDemand += this.state.demand[i];\r\n        this.balanced = sumDemand;\r\n\r\n        let count = 1;\r\n        if (sumSupply === sumDemand) {\r\n            let maxPenalty;\r\n            let rowIndex;\r\n            let colIndex;\r\n            while (this.balanced != 0) {\r\n                //till we have supplied all the goods\r\n                let content = this.state.content;\r\n                content.push(\r\n                    <Row style={{ marginBottom: 5 }}>\r\n                        <span style={{ fontSize: 18 }}>{`Iteration ${count}`}</span>\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                maxPenalty == undefined\r\n                    ? content.push(\r\n                          <Row>\r\n                              <span className=\"text\">\r\n                                  We assign penalties for all the rows and columns. Penalties are\r\n                                  calculated by subtracting the least value from the second least\r\n                                  value in that row/column.\r\n                              </span>\r\n                              <br />\r\n                          </Row>,\r\n                      )\r\n                    : content.push(\r\n                          <Row>\r\n                              <span className=\"text\">\r\n                                  The row/column with highest penalty is choosen(here, max penalty\r\n                                  is {maxPenalty}), and the cell in that row/column with least cost\r\n                                  is selected i.e. cell({rowIndex}, {colIndex}). The least of demand\r\n                                  or supply is assigned to that cell and is subtracted from both\r\n                                  supply and demand respectively. The row/column with exhausted\r\n                                  supply and/or demand is discaarded. The penalties are calculated\r\n                                  again for the updated matrix.\r\n                              </span>\r\n                              <br />\r\n                          </Row>,\r\n                      );\r\n                this.setState({ content: content });\r\n                initialMatrix = this.penalty(initialMatrix);\r\n\r\n                this.display(initialMatrix, this.m, this.n);\r\n\r\n                console.log(\r\n                    \"------------------------------------------------------------------------\",\r\n                );\r\n                let result = this.solve(initialMatrix);\r\n                initialMatrix = result.initialMatrix;\r\n                maxPenalty = result.maxPenalty;\r\n                rowIndex = result.rowIndex;\r\n                colIndex = result.colIndex;\r\n                count++;\r\n            }\r\n\r\n            let content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 5 }}>\r\n                    <span style={{ fontSize: 18 }}>{`Iteration ${count}`}</span>\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">\r\n                        And, finally the last cell is assigned with demand and supply.\r\n                    </span>\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            let final = copy(initialMatrix); //initialMatrix matrix is copies to final as to be displayed\r\n            this.display(final, this.m, this.n); //\r\n            let ans = \" The Minimum total transportation cost = \";\r\n\r\n            let degenerate = 0;\r\n            let cost = 0;\r\n            for (let i = 1; i < this.m - 2; i++) {\r\n                for (let j = 1; j < this.n - 2; j++) {\r\n                    if (initialMatrix[i][j] == \"--\") continue;\r\n                    ans += initialMatrix[i][j] + \" + \"; //this is just appending of string of cost and allocations\r\n                    cost +=\r\n                        stoi(initialMatrix[i][j].split(\"(\")[0]) *\r\n                        initialMatrix[i][j].split(\"(\")[1].split(\")\")[0];\r\n                    degenerate++;\r\n                }\r\n            }\r\n            ans = ans.substr(0, ans.length - 2);\r\n\r\n            console.log(ans, \"= \", cost);\r\n            content = this.state.content;\r\n            content.push(\r\n                <Row style={{ marginBottom: 10 }}>\r\n                    <span className=\"text\">{`${ans} = ${cost}`}</span>\r\n                    <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n\r\n            if (degenerate == this.m + this.n - 1) {\r\n                //checking if the sol. is optimized or not\r\n                content = this.state.content;\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {`Here, the number of allocated cells = ${degenerate} is equal to m + n - 1 = ${this.m} + ${this.n} - 1. Therefore, this solution is degenerate and we have to proceed further with optimal method.\r\n `}\r\n                        </span>\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n            } else {\r\n                content = this.state.content;\r\n                content.push(\r\n                    <Row>\r\n                        <span className=\"text\">\r\n                            {`Here, the number of allocated cells = ${degenerate} is equal to m + n - 1. Therefore, this solution is non-degenerate  and we need not proceed further with any optimal methods.`}\r\n                        </span>\r\n                        <br />\r\n                    </Row>,\r\n                );\r\n                this.setState({ content: content });\r\n                this.props.canProceed(false);\r\n            }\r\n        } else {\r\n            let content = this.state.content;\r\n\r\n            content.push(\r\n                <Row>\r\n                    <span className=\"text\">The given cost matrix is unbalanced.</span> <br />\r\n                </Row>,\r\n            );\r\n            this.setState({ content: content });\r\n            this.props.canProceed(false);\r\n        }\r\n    }\r\n\r\n    penalty(intermediate) {\r\n        let fmin, smin;\r\n        let m = intermediate.length,\r\n            n = intermediate[0].length;\r\n\r\n        for (let i = 1; i < m - 2; i++) {\r\n            fmin = Number.MAX_SAFE_INTEGER;\r\n            smin = Number.MAX_SAFE_INTEGER;\r\n            for (let j = 1; j < n - 2; j++) {\r\n                if (intermediate[i][j] == \"--\" || intermediate[i][j].indexOf(\"(\") !== -1) continue;\r\n\r\n                if (stoi(intermediate[i][j]) < fmin) {\r\n                    smin = fmin;\r\n                    fmin = stoi(intermediate[i][j]);\r\n                } else if (smin > stoi(intermediate[i][j]) && stoi(intermediate[i][j]) >= fmin) {\r\n                    smin = stoi(intermediate[i][j]);\r\n                }\r\n            }\r\n            if (smin == Number.MAX_SAFE_INTEGER && fmin == Number.MAX_SAFE_INTEGER) {\r\n                intermediate[i][intermediate[i].length - 1] = \"--\";\r\n            } else {\r\n                if (smin == Number.MAX_SAFE_INTEGER) {\r\n                    smin = fmin;\r\n                    fmin = 0;\r\n                }\r\n                if (intermediate[i][intermediate[i].length - 1] != \"--\")\r\n                    intermediate[i][intermediate[i].length - 1] =\r\n                        smin + \" - \" + fmin + \" = \" + (smin - fmin);\r\n            }\r\n        }\r\n        //find col penalty\r\n\r\n        for (let i = 1; i < n - 2; i++) {\r\n            fmin = Number.MAX_SAFE_INTEGER;\r\n            smin = Number.MAX_SAFE_INTEGER;\r\n            for (let j = 1; j < m - 2; j++) {\r\n                if (intermediate[j][i] == \"--\" || intermediate[j][i].indexOf(\"(\") !== -1) continue;\r\n\r\n                if (stoi(intermediate[j][i]) < fmin) {\r\n                    smin = fmin;\r\n                    fmin = stoi(intermediate[j][i]);\r\n                } else if (smin > stoi(intermediate[j][i]) && stoi(intermediate[j][i]) >= fmin) {\r\n                    smin = stoi(intermediate[j][i]);\r\n                }\r\n            }\r\n            if (smin == Number.MAX_SAFE_INTEGER && fmin == Number.MAX_SAFE_INTEGER) {\r\n                intermediate[intermediate.length - 1][i] = \"--\";\r\n            } else {\r\n                if (smin == Number.MAX_SAFE_INTEGER) {\r\n                    smin = fmin;\r\n                    fmin = 0;\r\n                }\r\n                if (intermediate[intermediate.length - 1][i] != \"--\")\r\n                    intermediate[intermediate.length - 1][i] =\r\n                        smin + \" - \" + fmin + \" = \" + (smin - fmin);\r\n            }\r\n        }\r\n        return intermediate;\r\n    }\r\n\r\n    solve(intermediate) {\r\n        //in this function max penalties will be selected and allocation will be done accordingly\r\n        let rowmax = Number.MIN_SAFE_INTEGER,\r\n            colmax = Number.MIN_SAFE_INTEGER,\r\n            row_index,\r\n            col_index;\r\n        let m = intermediate.length;\r\n        let n = intermediate[0].length;\r\n        let cell;\r\n        let s, v;\r\n        let rmax_allocation = Number.MIN_SAFE_INTEGER,\r\n            cmax_allocation = Number.MIN_SAFE_INTEGER,\r\n            rmincost = Number.MAX_SAFE_INTEGER,\r\n            cmincost = Number.MAX_SAFE_INTEGER;\r\n        //finding max rowpenalty\r\n        for (let i = 1; i < m - 2; i++) {\r\n            s = intermediate[i][n - 1];\r\n            v = \"\";\r\n            if (s == \"--\" || s.indexOf(\"(\") !== -1) continue;\r\n\r\n            v = s.split(\" = \")[1];\r\n            if (stoi(v) > rowmax) {\r\n                rmincost = Number.MAX_SAFE_INTEGER;\r\n                rmax_allocation = Number.MIN_SAFE_INTEGER;\r\n                console.log(v);\r\n                rowmax = stoi(v);\r\n                row_index = i;\r\n            }\r\n            if (stoi(v) == rowmax) {\r\n                if (Math.min(this.penaltyTie(copy(intermediate), i, \"row\"), rmincost) < rmincost) {\r\n                    rmincost = Math.min(this.penaltyTie(copy(intermediate), i, \"row\"), rmincost);\r\n                    rmax_allocation = Number.MIN_SAFE_INTEGER;\r\n                }\r\n                cell = this.costTie(copy(intermediate), i, rmincost, \"supply\");\r\n                if (cell > rmax_allocation) {\r\n                    rmax_allocation = cell;\r\n                    row_index = i;\r\n                }\r\n            }\r\n        }\r\n        //finding max colpenalty\r\n        for (let i = 1; i < n - 2; i++) {\r\n            s = intermediate[m - 1][i];\r\n            v = \"\";\r\n            if (s == \"--\" || s.indexOf(\"(\") !== -1) continue;\r\n\r\n            v = s.split(\" = \")[1];\r\n            if (stoi(v) > colmax) {\r\n                cmax_allocation = Number.MIN_SAFE_INTEGER;\r\n                cmincost = Number.MAX_SAFE_INTEGER;\r\n                console.log(v);\r\n                colmax = stoi(v);\r\n                col_index = i;\r\n            }\r\n            if (stoi(v) == colmax) {\r\n                if (Math.min(this.penaltyTie(copy(intermediate), i, \"col\"), cmincost) < cmincost) {\r\n                    cmincost = Math.min(this.penaltyTie(copy(intermediate), i, \"col\"), cmincost);\r\n                    cmax_allocation = Number.MIN_SAFE_INTEGER;\r\n                }\r\n\r\n                cell = this.costTie(copy(intermediate), i, cmincost, \"col\");\r\n                if (cell > cmax_allocation) {\r\n                    cmax_allocation = cell;\r\n                    col_index = i;\r\n                }\r\n            }\r\n        }\r\n        let demand, supply;\r\n        let index,\r\n            cost = 0,\r\n            min = Number.MAX_SAFE_INTEGER;\r\n        //again find max of rowpwnalty and colpenalty   and accordingly finding minimum cost in that row or column\r\n        if (colmax > rowmax || (colmax == rowmax && cmincost < rmincost)) {\r\n            console.log(\"=======>\", colmax);\r\n            for (let i = 1; i < m - 2; i++) {\r\n                if (\r\n                    intermediate[i][col_index] == \"--\" ||\r\n                    intermediate[i][col_index].indexOf(\"(\") !== -1\r\n                )\r\n                    continue;\r\n\r\n                if (stoi(intermediate[i][col_index]) < min) {\r\n                    min = stoi(intermediate[i][col_index]);\r\n                    index = i;\r\n                }\r\n            }\r\n            demand = intermediate[m - 2][col_index];\r\n            supply = intermediate[index][n - 2];\r\n            console.log(\"+===>\", index, col_index);\r\n            if (stoi(demand) > stoi(supply)) {\r\n                //as supply is min supply will get exhaust in that row so supply is passed\r\n                intermediate = this.allocate(copy(intermediate), \"supply\", index, col_index);\r\n                cost += min * stoi(supply);\r\n                this.balanced -= stoi(supply);\r\n            } //as demand is min demand will get exhaust in that col so demand is passed\r\n            else {\r\n                intermediate = this.allocate(copy(intermediate), \"demand\", index, col_index);\r\n                cost += min * stoi(demand);\r\n                this.balanced -= stoi(demand);\r\n            }\r\n            return {\r\n                initialMatrix: intermediate,\r\n                maxPenalty: colmax,\r\n                rowIndex: index,\r\n                colIndex: col_index,\r\n            };\r\n        } else {\r\n            console.log(\"=======>\", rowmax);\r\n            for (let i = 1; i < n - 2; i++) {\r\n                if (\r\n                    intermediate[row_index][i] == \"--\" ||\r\n                    intermediate[row_index][i].indexOf(\"(\") !== -1\r\n                )\r\n                    continue;\r\n                if (stoi(intermediate[row_index][i]) < min) {\r\n                    min = stoi(intermediate[row_index][i]);\r\n                    index = i;\r\n                }\r\n            }\r\n            demand = intermediate[m - 2][index];\r\n            supply = intermediate[row_index][n - 2];\r\n            console.log(\"+===>\", row_index, index);\r\n            if (stoi(demand) > stoi(supply)) {\r\n                //as supply is min supply will get exhaust in that row so supply is passed\r\n                intermediate = this.allocate(copy(intermediate), \"supply\", row_index, index);\r\n                cost += min * stoi(supply);\r\n                this.balanced -= stoi(supply);\r\n            } else {\r\n                //as demand is min demand will get exhaust in that col so demand is passed\r\n                intermediate = this.allocate(copy(intermediate), \"demand\", row_index, index);\r\n                cost += min * stoi(demand);\r\n                this.balanced -= stoi(demand);\r\n            }\r\n            return {\r\n                initialMatrix: intermediate,\r\n                maxPenalty: rowmax,\r\n                rowIndex: row_index,\r\n                colIndex: index,\r\n            };\r\n        }\r\n    }\r\n\r\n    allocate(allocation, name, row, col) {\r\n        //allocating the cell with the minimum cost\r\n        let val;\r\n        if (name == \"supply\") {\r\n            //finding the cell in the row\r\n            val = stoi(allocation[row][allocation[row].length - 2]);\r\n            for (let i = 1; i < allocation[row].length; i++) {\r\n                if ((\"\" + allocation[row][i]).indexOf(\"(\") !== -1) continue;\r\n                if (i == col) {\r\n                    allocation[row][col] += \"(\" + allocation[row][allocation[row].length - 2] + \")\";\r\n                } else {\r\n                    allocation[row][i] = \"--\";\r\n                }\r\n            }\r\n            if (stoi(allocation[allocation.length - 2][col]) - val > 0) {\r\n                allocation[allocation.length - 2][col] =\r\n                    \"\" + (stoi(allocation[allocation.length - 2][col]) - val);\r\n            } else {\r\n                for (let i = 1; i < allocation.length; i++) {\r\n                    if (allocation[i][col].indexOf(\"(\") !== -1) continue;\r\n                    allocation[i][col] = \"--\";\r\n                }\r\n            }\r\n        } else {\r\n            //finding the cell in column\r\n            val = stoi(allocation[allocation.length - 2][col]);\r\n            for (let i = 1; i < allocation.length; i++) {\r\n                if ((\"\" + allocation[i][col]).indexOf(\"(\") !== -1) continue;\r\n                if (i == row) {\r\n                    allocation[row][col] += \"(\" + allocation[allocation.length - 2][col] + \")\";\r\n                } else {\r\n                    allocation[i][col] = \"--\";\r\n                }\r\n            }\r\n\r\n            if (stoi(allocation[row][allocation[row].length - 2]) - val > 0) {\r\n                allocation[row][allocation[row].length - 2] =\r\n                    \"\" + (stoi(allocation[row][allocation[row].length - 2]) - val);\r\n            } else {\r\n                for (let i = 1; i < allocation[row].length; i++) {\r\n                    if ((\"\" + allocation[row][i]).indexOf(\"(\") !== -1) continue;\r\n                    allocation[row][i] = \"--\";\r\n                }\r\n            }\r\n        }\r\n        return allocation; //return\r\n    }\r\n\r\n    penaltyTie(vec, index, attribute) {\r\n        let m = vec.length,\r\n            n = vec[0].length,\r\n            mincost = Number.MAX_SAFE_INTEGER;\r\n        /*this function removes the penaltytie,if we have two rows with max penalty then find mincost from\r\n         these 2 or more rows*/\r\n        //else part is find mincost in 2 or more columns\r\n        if (attribute == \"row\") {\r\n            for (let i = 1; i < n - 2; i++) {\r\n                if (vec[index][i] == \"--\" || vec[index][i].indexOf(\"(\") !== -1) continue;\r\n                if (stoi(vec[index][i]) < mincost) {\r\n                    mincost = stoi(vec[index][i]);\r\n                }\r\n            }\r\n            return mincost;\r\n        } else {\r\n            for (let i = 1; i < m - 2; i++) {\r\n                if (vec[i][index] == \"--\" || vec[i][index].indexOf(\"(\") !== -1) continue;\r\n                if (stoi(vec[i][index]) < mincost) mincost = stoi(vec[i][index]);\r\n            }\r\n            return mincost;\r\n        }\r\n    }\r\n\r\n    costTie(vec, index, mincost, attribute) {\r\n        /* In this function costtie will be removed ,if we got same mincost from 2 or more rows then this\r\n             function will find max allocation at that point and will return that cell cost*/\r\n        let m = vec.length,\r\n            n = vec[0].length,\r\n            cost = Number.MIN_SAFE_INTEGER;\r\n        if (attribute == \"supply\") {\r\n            for (let i = 1; i < n - 2; i++) {\r\n                if (vec[index][i] == \"--\" || vec[index][i].indexOf(\"(\") !== -1) continue;\r\n                if (stoi(vec[index][i]) == mincost) {\r\n                    if (vec[index][n - 2] != \"--\" && vec[m - 2][i] != \"--\") {\r\n                        if (\r\n                            cost <\r\n                            mincost * Math.min(stoi(vec[index][n - 2]), stoi(vec[m - 2][i]))\r\n                        ) {\r\n                            cost = mincost * Math.min(stoi(vec[index][n - 2]), stoi(vec[m - 2][i]));\r\n                        }\r\n                    } else if (vec[index][n - 2] == \"--\" && vec[m - 2][i] != \"--\") {\r\n                        if (cost < mincost * stoi(vec[m - 2][i])) {\r\n                            cost = mincost * stoi(vec[m - 2][i]);\r\n                        }\r\n                    } else if (vec[index][n - 2] != \"--\" && vec[m - 2][i] == \"--\") {\r\n                        if (cost < mincost * stoi(vec[index][n - 2])) {\r\n                            cost = mincost * stoi(vec[index][n - 2]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (let i = 1; i < m - 2; i++) {\r\n                if (vec[i][index] == \"--\" || vec[i][index].indexOf(\"(\") !== -1) continue;\r\n                if (stoi(vec[i][index]) == mincost) {\r\n                    if (vec[i][n - 2] != \"--\" && vec[m - 2][index] != \"--\") {\r\n                        if (\r\n                            cost <\r\n                            mincost * Math.min(stoi(vec[i][n - 2]), stoi(vec[m - 2][index]))\r\n                        ) {\r\n                            cost = mincost * Math.min(stoi(vec[i][n - 2]), stoi(vec[m - 2][index]));\r\n                        }\r\n                    } else if (vec[i][n - 2] == \"--\" && vec[m - 2][index] != \"--\") {\r\n                        if (cost < mincost * stoi(vec[m - 2][index])) {\r\n                            cost = mincost * stoi(vec[m - 2][index]);\r\n                        }\r\n                    } else if (vec[i][n - 2] != \"--\" && vec[m - 2][index] == \"--\") {\r\n                        if (cost < mincost * stoi(vec[i][n - 2])) {\r\n                            cost = mincost * stoi(vec[i][n - 2]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return cost;\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.state.content}</div>;\r\n    }\r\n}\r\n\r\nconst stoi = (string) => parseInt(string, 10);\r\nconst copy = (matrix) => matrix.map((arr) => arr.map((e) => e));\r\n\r\n// new VogelsApproximationMethod({\r\n//     matrix: [\r\n//         [1, 2, 3, 4, null, null, null, null, null, null],\r\n//         [5, 6, 7, 8, null, null, null, null, null, null],\r\n//         [2, 4, 6, 8, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//         [null, null, null, null, null, null, null, null, null, null],\r\n//     ],\r\n//     nRows: 3,\r\n//     nCols: 4,\r\n//     supply: [10, 20, 30, null, null, null, null, null, null, null],\r\n//     demand: [5, 5, 20, 30, null, null, null, null, null, null],\r\n// });\r\n","import React from \"react\";\r\n\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Card from \"components/Card/Card\";\r\nimport CustomCheckButton from \"components/Checkbox/CustomCheckbox\";\r\nimport {\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Row,\r\n    Input,\r\n    Button,\r\n    Container,\r\n} from \"reactstrap\";\r\nimport NWC from \"algorithms/NorthWestCornerMethod\";\r\nimport MatrixMinimaMethod from \"algorithms/MatrixMinima\";\r\nimport RowMinimaMethod from \"algorithms/RowMinimaMethod\";\r\nimport ColumnMinima from \"algorithms/ColumnMinima\";\r\nimport ModiMethod from \"algorithms/ModiMethod\";\r\nimport SteppingStone from \"algorithms/SteppingStone\";\r\nimport VogelsApproximationMethod from \"algorithms/VogelsApproximationMethod\";\r\nexport default class TransportationProblem extends React.Component {\r\n    marks = [\r\n        {\r\n            value: 1,\r\n            label: \"1\",\r\n        },\r\n        {\r\n            value: 2,\r\n            label: \"2\",\r\n        },\r\n        {\r\n            value: 3,\r\n            label: \"3\",\r\n        },\r\n        {\r\n            value: 4,\r\n            label: \"4\",\r\n        },\r\n        {\r\n            value: 5,\r\n            label: \"5\",\r\n        },\r\n        {\r\n            value: 6,\r\n            label: \"6\",\r\n        },\r\n        {\r\n            value: 7,\r\n            label: \"7\",\r\n        },\r\n        {\r\n            value: 8,\r\n            label: \"8\",\r\n        },\r\n    ];\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            nSources: 4,\r\n            nDestinations: 4,\r\n            matrix: [\r\n                [7, 3, 5, 5, null, null, null, null, null],\r\n                [5, 5, 7, 6, null, null, null, null, null],\r\n                [8, 6, 6, 5, null, null, null, null, null],\r\n                [6, 1, 6, 4, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n            ],\r\n            demand: [21, 25, 17, 17, null, null, null, null, null],\r\n            supply: [34, 15, 12, 19, null, null, null, null, null, null],\r\n            step1Content: null,\r\n            step2Content: null,\r\n            costMatrix: null,\r\n            feasibleSolution: -1,\r\n            optimalSolution: -1,\r\n            update: false,\r\n            feasibleMatrix: [\r\n                [1, 2, 3, 4, null, null, null, null, null],\r\n                [5, 6, 7, 8, null, null, null, null, null],\r\n                [2, 4, 6, 8, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n            ],\r\n            canProceed: true,\r\n        };\r\n\r\n        this.toggleCheckbox = this.toggleCheckbox.bind(this);\r\n        this.handleSlider = this.handleSlider.bind(this);\r\n        this.formCostMatrix = this.formCostMatrix.bind(this);\r\n        this.callbackFunction = this.callbackFunction.bind(this);\r\n        this.canProceed = this.canProceed.bind(this);\r\n    }\r\n    componentDidMount() {}\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.update) {\r\n            this.formCostMatrix();\r\n        }\r\n    }\r\n\r\n    callbackFunction(feasibleMatrix) {\r\n        console.log(\"in transpostation prob------\");\r\n        console.log(feasibleMatrix);\r\n        this.setState({\r\n            feasibleMatrix: feasibleMatrix,\r\n        });\r\n    }\r\n\r\n    solveForOptimal() {\r\n        let optimalContent;\r\n        switch (this.state.optimalSolution) {\r\n            case 0:\r\n                optimalContent = (\r\n                    <ModiMethod\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        feasibleMatrix={this.state.feasibleMatrix}\r\n                    />\r\n                );\r\n\r\n                break;\r\n            case 1:\r\n                optimalContent = (\r\n                    <SteppingStone\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        feasibleMatrix={this.state.feasibleMatrix}\r\n                    />\r\n                );\r\n\r\n                break;\r\n        }\r\n        this.setState({ step2Content: optimalContent });\r\n    }\r\n\r\n    canProceed(value) {\r\n        this.setState({ canProceed: value });\r\n    }\r\n\r\n    solve() {\r\n        let content;\r\n        this.canProceed(true);\r\n        switch (this.state.feasibleSolution) {\r\n            case 0:\r\n                content = (\r\n                    <RowMinimaMethod\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        callbackFunction={this.callbackFunction}\r\n                        canProceed={this.canProceed}\r\n                    />\r\n                );\r\n\r\n                break;\r\n            case 1:\r\n                content = (\r\n                    <ColumnMinima\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        callbackFunction={this.callbackFunction}\r\n                        canProceed={this.canProceed}\r\n                    />\r\n                );\r\n                break;\r\n            case 2:\r\n                content = (\r\n                    <MatrixMinimaMethod\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        callbackFunction={this.callbackFunction}\r\n                        canProceed={this.canProceed}\r\n                    />\r\n                );\r\n                break;\r\n            case 3:\r\n                content = (\r\n                    <VogelsApproximationMethod\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        callbackFunction={this.callbackFunction}\r\n                        canProceed={this.canProceed}\r\n                    />\r\n                );\r\n                break;\r\n            case 4:\r\n                content = (\r\n                    <NWC\r\n                        matrix={this.state.matrix}\r\n                        demand={this.state.demand}\r\n                        supply={this.state.supply}\r\n                        nRows={this.state.nSources}\r\n                        nCols={this.state.nDestinations}\r\n                        callbackFunction={this.callbackFunction}\r\n                        canProceed={this.canProceed}\r\n                    />\r\n                );\r\n\r\n                break;\r\n        }\r\n\r\n        this.setState({\r\n            step1Content: content,\r\n            step2Content: null,\r\n            optimalSolution: -1,\r\n\r\n            feasibleSolutionMethod: this.state.feasibleSolution,\r\n        });\r\n    }\r\n\r\n    formCostMatrix() {\r\n        this.setState({ costMatrix: null }, () => {\r\n            let matrix = [];\r\n\r\n            let row = [];\r\n            row.push(<Col md=\"2\" className=\"col-xs-2\" />);\r\n            for (let i = 0; i < this.state.nDestinations; i++) {\r\n                row.push(\r\n                    <Col\r\n                        md=\"1\"\r\n                        className=\"col-xs-1 text-center\"\r\n                        style={{\r\n                            fontSize: window.innerWidth <= 800 ? 10 : null,\r\n                            padding: window.innerWidth <= 800 ? 0 : null,\r\n                        }}\r\n                    >\r\n                        {`D${i + 1}`}\r\n                    </Col>\r\n                );\r\n            }\r\n            row.push(\r\n                <Col\r\n                    md=\"1\"\r\n                    className=\"col-xs-1 text-center\"\r\n                    style={{\r\n                        fontSize: window.innerWidth <= 800 ? 10 : null,\r\n                        padding: window.innerWidth <= 800 ? 0 : null,\r\n                    }}\r\n                >\r\n                    {`Supply`}\r\n                </Col>\r\n            );\r\n            matrix.push(<Row>{row}</Row>);\r\n\r\n            for (let i = 0; i < this.state.nSources; i++) {\r\n                row = [];\r\n                row.push(\r\n                    <Col\r\n                        md=\"2\"\r\n                        className=\"col-xs-2\"\r\n                        style={\r\n                            window.innerWidth >= 800\r\n                                ? null\r\n                                : { padding: 0, margin: 0 }\r\n                        }\r\n                    >\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"\"\r\n                            value={`S${i + 1}`}\r\n                            // onChange={(e) => this.handleInput(e, i, j)}\r\n                            style={\r\n                                window.innerWidth >= 800\r\n                                    ? {\r\n                                          width: 100,\r\n                                          height: 50,\r\n                                          textAlign: \"right\",\r\n                                          color: \"#000\",\r\n                                          fontSize: 14,\r\n                                          border: \"none\",\r\n                                      }\r\n                                    : {\r\n                                          fontSize: 10,\r\n                                          color: \"#000\",\r\n                                          textAlign: \"right\",\r\n                                          padding: 0,\r\n                                          width: 60,\r\n                                          height: 23,\r\n                                          border: \"none\",\r\n                                      }\r\n                            }\r\n                        />\r\n                    </Col>\r\n                );\r\n                for (let j = 0; j < this.state.nDestinations; j++) {\r\n                    row.push(\r\n                        <Col\r\n                            md=\"1\"\r\n                            className=\"col-xs-1\"\r\n                            style={\r\n                                window.innerWidth >= 800\r\n                                    ? null\r\n                                    : { padding: 0, margin: 0 }\r\n                            }\r\n                        >\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder=\"\"\r\n                                value={\r\n                                    !isNaN(this.state.matrix[i][j])\r\n                                        ? this.state.matrix[i][j]\r\n                                        : \"\"\r\n                                }\r\n                                onChange={(e) => this.handleInput(e, i, j)}\r\n                                style={\r\n                                    window.innerWidth >= 800\r\n                                        ? {\r\n                                              width: 50,\r\n                                              height: 50,\r\n                                              textAlign: \"center\",\r\n                                          }\r\n                                        : {\r\n                                              textAlign: \"center\",\r\n                                              width: \"100%\",\r\n                                              padding: 0,\r\n                                              width: 23,\r\n                                              height: 23,\r\n                                          }\r\n                                }\r\n                            />\r\n                        </Col>\r\n                    );\r\n                }\r\n                row.push(\r\n                    <Col\r\n                        md=\"1\"\r\n                        className=\"col-xs-1\"\r\n                        style={\r\n                            window.innerWidth >= 800\r\n                                ? null\r\n                                : { padding: 0, margin: 0 }\r\n                        }\r\n                    >\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"\"\r\n                            value={\r\n                                !isNaN(this.state.supply[i])\r\n                                    ? this.state.supply[i]\r\n                                    : \"\"\r\n                            }\r\n                            onChange={(e) => this.handleSupplyInput(e, i)}\r\n                            style={\r\n                                window.innerWidth >= 800\r\n                                    ? {\r\n                                          width: 50,\r\n                                          height: 50,\r\n                                          textAlign: \"center\",\r\n                                      }\r\n                                    : {\r\n                                          textAlign: \"center\",\r\n                                          width: \"100%\",\r\n                                          padding: 0,\r\n                                          width: 23,\r\n                                          height: 23,\r\n                                      }\r\n                            }\r\n                        />\r\n                    </Col>\r\n                );\r\n                matrix.push(<Row>{row}</Row>);\r\n            }\r\n            row = [];\r\n            row.push(\r\n                <Col\r\n                    md=\"2\"\r\n                    className=\"col-xs-2\"\r\n                    style={\r\n                        window.innerWidth >= 800\r\n                            ? null\r\n                            : { padding: 0, margin: 0 }\r\n                    }\r\n                >\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"\"\r\n                        value={`Demand`}\r\n                        // onChange={(e) => this.handleInput(e, i, j)}\r\n                        style={\r\n                            window.innerWidth >= 800\r\n                                ? {\r\n                                      width: 100,\r\n                                      height: 50,\r\n                                      textAlign: \"right\",\r\n                                      color: \"#000\",\r\n                                      fontSize: 14,\r\n                                      border: \"none\",\r\n                                  }\r\n                                : {\r\n                                      fontSize: 10,\r\n                                      color: \"#000\",\r\n                                      textAlign: \"right\",\r\n                                      padding: 0,\r\n                                      width: 60,\r\n                                      height: 23,\r\n                                      border: \"none\",\r\n                                  }\r\n                        }\r\n                    />\r\n                </Col>\r\n            );\r\n            for (let i = 0; i < this.state.nDestinations; i++) {\r\n                row.push(\r\n                    <Col\r\n                        md=\"1\"\r\n                        className=\"col-xs-1\"\r\n                        style={\r\n                            window.innerWidth >= 800\r\n                                ? null\r\n                                : { padding: 0, margin: 0 }\r\n                        }\r\n                    >\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder=\"\"\r\n                            value={\r\n                                !isNaN(this.state.demand[i])\r\n                                    ? this.state.demand[i]\r\n                                    : \"\"\r\n                            }\r\n                            onChange={(e) => this.handleDemandInput(e, i)}\r\n                            style={\r\n                                window.innerWidth >= 800\r\n                                    ? {\r\n                                          width: 50,\r\n                                          height: 50,\r\n                                          textAlign: \"center\",\r\n                                      }\r\n                                    : {\r\n                                          textAlign: \"center\",\r\n                                          width: \"100%\",\r\n                                          padding: 0,\r\n                                          width: 23,\r\n                                          height: 23,\r\n                                      }\r\n                            }\r\n                        />\r\n                    </Col>\r\n                );\r\n            }\r\n            matrix.push(<Row>{row}</Row>);\r\n            this.setState({ costMatrix: matrix, update: false });\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this.setState({\r\n            matrix: [\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n                [null, null, null, null, null, null, null, null, null],\r\n            ],\r\n            demand: [null, null, null, null, null, null, null, null, null],\r\n            supply: [null, null, null, null, null, null, null, null, null],\r\n            canProceed: true,\r\n            update: true,\r\n        });\r\n    }\r\n\r\n    toggleCheckbox(name, value) {\r\n        this.setState(\r\n            {\r\n                [name]: value,\r\n                update: true,\r\n            },\r\n            () => {\r\n                if (name === \"optimalSolution\") {\r\n                    this.solveForOptimal();\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    handleSlider(_, value, name) {\r\n        this.setState({ [name]: value, update: true });\r\n    }\r\n\r\n    handleInput(event, row, col) {\r\n        let matrix = this.state.matrix;\r\n        matrix[row][col] = parseInt(event.target.value, 10);\r\n        matrix[row][col] = Number.isNaN(matrix[row][col])\r\n            ? null\r\n            : matrix[row][col];\r\n        this.setState({ matrix: matrix, update: true });\r\n    }\r\n\r\n    handleSupplyInput(event, index) {\r\n        let array = this.state.supply;\r\n        array[index] = parseInt(event.target.value, 10);\r\n        array[index] = Number.isNaN(array[index]) ? null : array[index];\r\n        this.setState({ supply: array, update: true });\r\n    }\r\n\r\n    handleDemandInput(event, index) {\r\n        let array = this.state.demand;\r\n        array[index] = parseInt(event.target.value, 10);\r\n        array[index] = Number.isNaN(array[index]) ? null : array[index];\r\n        this.setState({ demand: array, update: true });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                className=\"content\"\r\n                style={{ minHeight: \"83vh\" }}\r\n                ref={(el) => (this.printRef = el)}\r\n            >\r\n                <Card\r\n                    title=\"Input Question\"\r\n                    content={\r\n                        <div>\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <Label for=\"nValue\">\r\n                                        Select method for finding feasible\r\n                                        solution\r\n                                    </Label>\r\n                                    <Row className=\"container\">\r\n                                        <CustomCheckButton\r\n                                            value={0}\r\n                                            name=\"feasibleSolution\"\r\n                                            currentValue={\r\n                                                this.state.feasibleSolution\r\n                                            }\r\n                                            toggle={this.toggleCheckbox}\r\n                                            content=\"Row Minima Method\"\r\n                                        />\r\n                                        <CustomCheckButton\r\n                                            value={1}\r\n                                            name=\"feasibleSolution\"\r\n                                            currentValue={\r\n                                                this.state.feasibleSolution\r\n                                            }\r\n                                            toggle={this.toggleCheckbox}\r\n                                            content=\"Column Minima Method\"\r\n                                        />\r\n                                        <CustomCheckButton\r\n                                            value={2}\r\n                                            name=\"feasibleSolution\"\r\n                                            currentValue={\r\n                                                this.state.feasibleSolution\r\n                                            }\r\n                                            toggle={this.toggleCheckbox}\r\n                                            content=\"Matrix Minima Method\"\r\n                                        />\r\n                                        <CustomCheckButton\r\n                                            value={3}\r\n                                            name=\"feasibleSolution\"\r\n                                            currentValue={\r\n                                                this.state.feasibleSolution\r\n                                            }\r\n                                            toggle={this.toggleCheckbox}\r\n                                            content=\"Vogel's Approximation Method\"\r\n                                        />\r\n                                        <CustomCheckButton\r\n                                            value={4}\r\n                                            name=\"feasibleSolution\"\r\n                                            currentValue={\r\n                                                this.state.feasibleSolution\r\n                                            }\r\n                                            toggle={this.toggleCheckbox}\r\n                                            content=\"North West Corner Method\"\r\n                                        />\r\n                                    </Row>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup>\r\n                                    <Label for=\"nValue\">\r\n                                        Enter number of sources\r\n                                    </Label>\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <Slider\r\n                                                defaultValue={2}\r\n                                                value={this.state.nSources}\r\n                                                aria-labelledby=\"discrete-slider-custom\"\r\n                                                step={1}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                marks={this.marks}\r\n                                                min={1}\r\n                                                max={8}\r\n                                                onChange={(e, value) =>\r\n                                                    this.handleSlider(\r\n                                                        e,\r\n                                                        value,\r\n                                                        \"nSources\"\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </FormGroup>\r\n\r\n                                <FormGroup>\r\n                                    <Label for=\"nValue\">\r\n                                        Enter number of destinations\r\n                                    </Label>\r\n                                    <Row>\r\n                                        <Col md=\"6\">\r\n                                            <Slider\r\n                                                defaultValue={2}\r\n                                                value={this.state.nDestinations}\r\n                                                aria-labelledby=\"discrete-slider-custom\"\r\n                                                step={1}\r\n                                                valueLabelDisplay=\"auto\"\r\n                                                marks={this.marks}\r\n                                                min={1}\r\n                                                max={8}\r\n                                                onChange={(e, value) =>\r\n                                                    this.handleSlider(\r\n                                                        e,\r\n                                                        value,\r\n                                                        \"nDestinations\"\r\n                                                    )\r\n                                                }\r\n                                            />\r\n                                        </Col>\r\n                                    </Row>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Row\r\n                                        style={{\r\n                                            maxWidth: 800,\r\n                                            marginLeft:\r\n                                                window.innerWidth < 800\r\n                                                    ? 10\r\n                                                    : null,\r\n                                        }}\r\n                                    >\r\n                                        {this.state.costMatrix}\r\n                                    </Row>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        onClick={(e) => this.solve()}\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                        }}\r\n                                    >\r\n                                        Solve{\" \"}\r\n                                        <i\r\n                                            className=\"fa fa-arrow-circle-o-right\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>\r\n                                    </Button>\r\n                                    <Button\r\n                                        color=\"danger\"\r\n                                        onClick={(e) => this.clear()}\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                        }}\r\n                                    >\r\n                                        Clear{\" \"}\r\n                                        <i\r\n                                            className=\"fa fa-trash\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>\r\n                                    </Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </div>\r\n                    }\r\n                />\r\n                {this.state.step1Content ? (\r\n                    <Card\r\n                        title={\r\n                            this.state.feasibleSolutionMethod === 0\r\n                                ? \"Row Minima Method\"\r\n                                : this.state.feasibleSolutionMethod == 1\r\n                                ? \"Column Minima Method\"\r\n                                : this.state.feasibleSolutionMethod == 2\r\n                                ? \"Matrix Minima Method\"\r\n                                : this.state.feasibleSolutionMethod == 3\r\n                                ? \"Vogel's Approximation Method\"\r\n                                : \"North west Corner Method\"\r\n                        }\r\n                        content={\r\n                            <div>\r\n                                <Container>{this.state.step1Content}</Container>\r\n\r\n                                <Form\r\n                                    style={{\r\n                                        display: this.state.canProceed\r\n                                            ? null\r\n                                            : \"none\",\r\n                                    }}\r\n                                >\r\n                                    <FormGroup>\r\n                                        <Label for=\"solveForOptimal\">\r\n                                            Continue to solve for optimal\r\n                                            solution? Choose one method:\r\n                                        </Label>\r\n                                        <span\r\n                                            id=\"solveForOptimal\"\r\n                                            style={{ padding: 6 }}\r\n                                        >\r\n                                            <CustomCheckButton\r\n                                                value={0}\r\n                                                name=\"optimalSolution\"\r\n                                                currentValue={\r\n                                                    this.state.optimalSolution\r\n                                                }\r\n                                                toggle={this.toggleCheckbox}\r\n                                                content=\"MODI Method\"\r\n                                            />\r\n                                            <CustomCheckButton\r\n                                                value={1}\r\n                                                name=\"optimalSolution\"\r\n                                                currentValue={\r\n                                                    this.state.optimalSolution\r\n                                                }\r\n                                                toggle={this.toggleCheckbox}\r\n                                                content=\"Stepping Stone Method\"\r\n                                            />\r\n                                        </span>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </div>\r\n                        }\r\n                    />\r\n                ) : null}\r\n                {this.state.step2Content ? (\r\n                    <Card\r\n                        title={\r\n                            this.state.optimalSolution === 0\r\n                                ? \"Modified Distribution(Modi) Method\"\r\n                                : \"Stepping Stone Method\"\r\n                        }\r\n                        content={\r\n                            <div>\r\n                                <Container>{this.state.step2Content}</Container>\r\n                            </div>\r\n                        }\r\n                    ></Card>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport HungarianAlgo from \"views/HungarianAlgo\";\r\nimport CustomCard from \"components/Card/Card\";\r\nimport testcases from \"views/cases.json\";\r\nimport { Switch } from \"@material-ui/core/\";\r\n\r\nimport { Card, CardBody, CardTitle, CardSubtitle, Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nexport default class TestCases extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            content: [],\r\n            testStarted: false,\r\n            isPaused: true,\r\n            numTestCases: testcases.length,\r\n            numSuccess: 0,\r\n            numFailure: 0,\r\n            testIndex: 0,\r\n            showFailedCases: false,\r\n            time: null,\r\n            remainingTime: null,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    testHungarianAlgorithm(id, matrix, size, minOptimal) {\r\n        let algo = new HungarianAlgo({ devTest: true, matrix: matrix, size: size });\r\n        algo.then((optimal) => {\r\n            let content = this.state.content;\r\n            let json = {};\r\n            if (optimal === minOptimal) {\r\n                let numSuccess = this.state.numSuccess;\r\n                json = { numSuccess: numSuccess + 1 };\r\n            } else {\r\n                let numFailure = this.state.numFailure;\r\n                json = { numFailure: numFailure + 1 };\r\n            }\r\n            content.push(\r\n                <Col\r\n                    key={`testcase-${id}`}\r\n                    md=\"4\"\r\n                    style={\r\n                        this.state.showFailedCases\r\n                            ? optimal === minOptimal\r\n                                ? { display: \"none\" }\r\n                                : { display: \"block\" }\r\n                            : { display: \"block\" }\r\n                    }\r\n                >\r\n                    <CustomCard\r\n                        title={`Test Case ${id}`}\r\n                        content={\r\n                            <div>\r\n                                <Row>\r\n                                    <Col md=\"9\" className=\"col-xs-9\">\r\n                                        <div>Size of input matrix: {size}</div>\r\n                                        <div>Expected Answer: {minOptimal}</div>\r\n                                        <div>Output Answer: {optimal}</div>\r\n                                    </Col>\r\n                                    <Col md=\"3\" className=\"col-xs-3\">\r\n                                        <i\r\n                                            className={`fa ${\r\n                                                optimal === minOptimal\r\n                                                    ? \"fa-check text-success\"\r\n                                                    : \"fa-times text-danger\"\r\n                                            }`}\r\n                                            aria-hidden=\"true\"\r\n                                            style={{\r\n                                                fontSize: 30,\r\n                                            }}\r\n                                        ></i>\r\n                                    </Col>\r\n                                </Row>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Col>,\r\n            );\r\n            this.setState({ content: content, ...json });\r\n        });\r\n    }\r\n\r\n    stopTesting() {\r\n        clearTimeout(this.timeout);\r\n        this.setState({\r\n            testStarted: false,\r\n            isPaused: true,\r\n            testIndex: 0,\r\n            numSuccess: 0,\r\n            numFailure: 0,\r\n            content: [],\r\n            time: null,\r\n        });\r\n    }\r\n\r\n    pauseTesting() {\r\n        clearTimeout(this.timeout);\r\n        this.setState({\r\n            testIndex: this.state.numSuccess + this.state.numFailure,\r\n            isPaused: true,\r\n        });\r\n    }\r\n\r\n    test() {\r\n        console.log(\"*** Dev Test Initiated ***\");\r\n        this.setState({ testStarted: true, isPaused: false, time: new Date().getTime() / 1000 });\r\n\r\n        let length = testcases.length;\r\n\r\n        let i = this.state.testIndex;\r\n        this.timeout = setInterval(() => {\r\n            if (i === length - 1) clearTimeout(this.timeout);\r\n\r\n            let n = 50;\r\n            if (i % n == 0) {\r\n                let time = (new Date().getTime() / 1000 - this.state.time) / n;\r\n                time =\r\n                    (this.state.numTestCases - (this.state.numSuccess + this.state.numFailure)) *\r\n                    time;\r\n\r\n                let min = Math.round(time / 60);\r\n                let sec = Math.round(time % 60);\r\n                console.log(min);\r\n                let remainingTime = `${min < 10 ? \"0\" + min : min} : ${sec < 10 ? \"0\" + sec : sec}`;\r\n\r\n                this.setState({ time: new Date().getTime() / 1000, remainingTime: remainingTime });\r\n            }\r\n\r\n            for (let j = 0; j < testcases[i].size; j++) {\r\n                for (let k = 0; k < testcases[i].size; k++) {\r\n                    testcases[i].matrix[j][k] = parseInt(testcases[i].matrix[j][k], 10);\r\n                }\r\n            }\r\n\r\n            this.testHungarianAlgorithm(\r\n                testcases[i].id,\r\n                testcases[i].matrix,\r\n                parseInt(testcases[i].size, 10),\r\n                parseInt(testcases[i].optimal, 10),\r\n            );\r\n            i += 1;\r\n        }, 1);\r\n    }\r\n\r\n    handleChange() {\r\n        let result = this.state.showFailedCases;\r\n\r\n        this.setState({ showFailedCases: !result });\r\n        this.forceUpdate();\r\n    }\r\n\r\n    render() {\r\n        let percent = (\r\n            (this.state.numSuccess / (this.state.numSuccess + this.state.numFailure)) *\r\n            100\r\n        ).toFixed(1);\r\n\r\n        return (\r\n            <div className=\"content\" style={{ minHeight: \"83vh\" }}>\r\n                <CustomCard\r\n                    title=\"Test the Hungarian Algorithm\"\r\n                    content={\r\n                        <div>\r\n                            <Container>\r\n                                <Row>\r\n                                    <Col md=\"10\">\r\n                                        <Row>\r\n                                            <Col md=\"3\">\r\n                                                <Card\r\n                                                    style={{\r\n                                                        backgroundColor: \"#07689f\",\r\n                                                        color: \"#fff\",\r\n                                                        padding: 15,\r\n                                                    }}\r\n                                                >\r\n                                                    <CardBody style={{ textAlign: \"center\" }}>\r\n                                                        <CardTitle\r\n                                                            style={{\r\n                                                                fontSize: 20,\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Total Test Cases\r\n                                                        </CardTitle>\r\n                                                        <CardSubtitle style={{ fontSize: 18 }}>\r\n                                                            {this.state.numTestCases}\r\n                                                        </CardSubtitle>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            <Col md=\"3\">\r\n                                                <Card\r\n                                                    style={{\r\n                                                        backgroundColor: \"#81b214\",\r\n                                                        color: \"#fff\",\r\n                                                        padding: 15,\r\n                                                    }}\r\n                                                >\r\n                                                    <CardBody style={{ textAlign: \"center\" }}>\r\n                                                        <CardTitle\r\n                                                            style={{\r\n                                                                fontSize: 20,\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Passed Test Cases\r\n                                                        </CardTitle>\r\n                                                        <CardSubtitle style={{ fontSize: 18 }}>\r\n                                                            {this.state.numSuccess}\r\n                                                        </CardSubtitle>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            <Col md=\"3\">\r\n                                                <Card\r\n                                                    style={{\r\n                                                        backgroundColor: \"#ea5455\",\r\n                                                        color: \"#fff\",\r\n                                                        padding: 15,\r\n                                                    }}\r\n                                                >\r\n                                                    <CardBody style={{ textAlign: \"center\" }}>\r\n                                                        <CardTitle\r\n                                                            style={{\r\n                                                                fontSize: 20,\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Failed Test Cases\r\n                                                        </CardTitle>\r\n                                                        <CardSubtitle style={{ fontSize: 18 }}>\r\n                                                            {this.state.numFailure}\r\n                                                        </CardSubtitle>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                            <Col md=\"3\">\r\n                                                <Card\r\n                                                    style={{\r\n                                                        backgroundColor: \"#ff9642\",\r\n                                                        color: \"#fff\",\r\n                                                        padding: 15,\r\n                                                    }}\r\n                                                >\r\n                                                    <CardBody style={{ textAlign: \"center\" }}>\r\n                                                        <CardTitle\r\n                                                            style={{\r\n                                                                fontSize: 20,\r\n                                                                fontWeight: \"bold\",\r\n                                                            }}\r\n                                                        >\r\n                                                            Accuracy\r\n                                                        </CardTitle>\r\n                                                        <CardSubtitle style={{ fontSize: 18 }}>\r\n                                                            {isNaN(percent) ? 0 : percent}%\r\n                                                        </CardSubtitle>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        onClick={() => {\r\n                                            if (this.state.isPaused) this.test();\r\n                                            else this.pauseTesting();\r\n                                        }}\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                            marginBottom: 10,\r\n                                            width: 130,\r\n                                            textAlign: \"start\",\r\n                                        }}\r\n                                    >\r\n                                        {this.state.isPaused ? (\r\n                                            <i\r\n                                                className=\"fa fa-play\"\r\n                                                aria-hidden=\"true\"\r\n                                                style={{ fontSize: 16 }}\r\n                                            ></i>\r\n                                        ) : (\r\n                                            <i\r\n                                                className=\"fa fa-pause\"\r\n                                                aria-hidden=\"true\"\r\n                                                style={{ fontSize: 16 }}\r\n                                            ></i>\r\n                                        )}\r\n                                        {this.state.isPaused ? \" Start Testing\" : \" Pause\"}\r\n                                    </Button>\r\n\r\n                                    <Button\r\n                                        color=\"danger\"\r\n                                        onClick={() => {\r\n                                            this.stopTesting();\r\n                                        }}\r\n                                        style={{\r\n                                            marginRight: 10,\r\n                                            marginBottom: 10,\r\n                                            display: !this.state.isPaused ? \"inline\" : \"none\",\r\n                                        }}\r\n                                    >\r\n                                        <i\r\n                                            className=\"fa fa-stop\"\r\n                                            aria-hidden=\"true\"\r\n                                            style={{ fontSize: 16 }}\r\n                                        ></i>{\" \"}\r\n                                        Stop\r\n                                    </Button>\r\n                                </Row>\r\n                                <Row\r\n                                    style={{\r\n                                        display: !this.state.isPaused ? \"block\" : \"none\",\r\n                                    }}\r\n                                >\r\n                                    Estimated time: {this.state.remainingTime}\r\n                                </Row>\r\n\r\n                                <Row>\r\n                                    <h5>\r\n                                        {\" \"}\r\n                                        Display Failed TestCases only\r\n                                        <Switch\r\n                                            checked={this.state.showFailedCases}\r\n                                            onChange={() => this.handleChange()}\r\n                                            name=\"showFailedTestcases\"\r\n                                            color=\"primary\"\r\n                                            inputProps={{\r\n                                                \"aria-label\": \"secondary checkbox\",\r\n                                            }}\r\n                                        />\r\n                                    </h5>\r\n                                </Row>\r\n                            </Container>\r\n                        </div>\r\n                    }\r\n                />\r\n                <Row>{this.state.content}</Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport HungarianAlgo from \"views/HungarianAlgo.jsx\";\r\nimport TransportationProblem from \"views/TransportationProblem.jsx\";\r\nimport TestCases from \"views/TestCases\";\r\nconst dashboardRoutes = [\r\n    {\r\n        path: \"/transportation\",\r\n        name: \"Transportation Problem\",\r\n        component: TransportationProblem,\r\n        layout: \"/algorithms\",\r\n    },\r\n    {\r\n        path: \"/hungarian\",\r\n        name: \"Assignment Problem\",\r\n        component: HungarianAlgo,\r\n        layout: \"/algorithms\",\r\n    },\r\n    {\r\n        path: \"/test\",\r\n        name: \"Test Cases\",\r\n        component: TestCases,\r\n        layout: \"/algorithms\",\r\n    },\r\n];\r\n\r\nexport default dashboardRoutes;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { Component } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\nimport AdminNavbar from \"components/Navbars/AdminNavbar\";\r\nimport Footer from \"components/Footer/Footer\";\r\nimport Sidebar from \"components/Sidebar/Sidebar\";\r\n\r\nimport routes from \"routes.js\";\r\n\r\nimport image from \"assets/img/sidebar-3.jpg\";\r\n\r\nclass Admin extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            image: image,\r\n            color: \"black\",\r\n            hasImage: true,\r\n            fixedClasses: \"dropdown show-dropdown open\",\r\n        };\r\n    }\r\n\r\n    getRoutes = (routes) => {\r\n        return routes.map((prop, key) => {\r\n            if (prop.layout === \"/algorithms\") {\r\n                return (\r\n                    <Route\r\n                        path={prop.layout + prop.path}\r\n                        render={(props) => <prop.component {...props} />}\r\n                        key={key}\r\n                    />\r\n                );\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    };\r\n    getBrandText = () => {\r\n        for (let i = 0; i < routes.length; i++) {\r\n            if (this.props.location.pathname.indexOf(routes[i].layout + routes[i].path) !== -1) {\r\n                return routes[i].name;\r\n            }\r\n        }\r\n        return \"Brand\";\r\n    };\r\n\r\n    componentDidUpdate(e) {\r\n        if (\r\n            window.innerWidth < 993 &&\r\n            e.history.location.pathname !== e.location.pathname &&\r\n            document.documentElement.className.indexOf(\"nav-open\") !== -1\r\n        ) {\r\n            document.documentElement.classList.toggle(\"nav-open\");\r\n        }\r\n        if (e.history.action === \"PUSH\") {\r\n            document.documentElement.scrollTop = 0;\r\n            document.scrollingElement.scrollTop = 0;\r\n            this.refs.mainPanel.scrollTop = 0;\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <Sidebar\r\n                    {...this.props}\r\n                    routes={routes}\r\n                    image={this.state.image}\r\n                    color={this.state.color}\r\n                    hasImage={this.state.hasImage}\r\n                />\r\n                <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\r\n                    <AdminNavbar\r\n                        {...this.props}\r\n                        brandText={this.getBrandText(this.props.location.pathname)}\r\n                    />\r\n                    <Switch>{this.getRoutes(routes)}</Switch>\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;\r\n","/*!\r\n\r\n=========================================================\r\n* Light Bootstrap Dashboard React - v1.3.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./assets/css/animate.min.css\";\r\nimport \"./assets/sass/light-bootstrap-dashboard-react.scss?v=1.3.0\";\r\nimport \"./assets/css/demo.css\";\r\nimport \"./assets/css/pe-icon-7-stroke.css\";\r\n\r\nimport AdminLayout from \"layouts/Admin.jsx\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path=\"/algorithms\" render={(props) => <AdminLayout {...props} />} />\r\n            <Redirect from=\"/\" to=\"/algorithms/transportation\" />\r\n        </Switch>\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\"),\r\n);\r\n","module.exports = __webpack_public_path__ + \"static/media/richa.37c38062.jpg\";","module.exports = __webpack_public_path__ + \"static/media/akash.346988f1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/parag.237ce3b3.jpeg\";"],"sourceRoot":""}